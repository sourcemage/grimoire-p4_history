           SPELL=perl-encode
         VERSION=2.10
          SOURCE=Encode-$VERSION.tar.gz
SOURCE_DIRECTORY=$BUILD_DIRECTORY/Encode-$VERSION
   SOURCE_URL[0]=http://search.cpan.org/CPAN/authors/id/D/DA/DANKOGAI/$SOURCE
      SOURCE_GPG="gurus.gpg:${SOURCE}.sig"
      LICENSE[0]="ART GPL"
       BUILD_API=2
        WEB_SITE=http://search.cpan.org/~dankogai/Encode-$VERSION/Encode.pm
         ENTERED=20050802
         UPDATED=20050802
           SHORT='Interfaces between Perl strings and the rest of the system'
cat << EOF
The Encode module provides the interfaces between Perl's strings and the rest
of the system. Perl strings are sequences of characters.

The repertoire of characters that Perl can represent is at least that defined
by the Unicode Consortium. On most platforms the ordinal values of the
characters (as returned by ord(ch)) is the "Unicode codepoint" for the
character (the exceptions are those platforms where the legacy encoding is some
variant of EBCDIC rather than a super-set of ASCII - see perlebcdic).

Traditionally, computer data has been moved around in 8-bit chunks often called
"bytes". These chunks are also known as "octets" in networking standards. Perl
is widely used to manipulate data of many types - not only strings of characters
representing human or computer languages but also "binary" data being the
machine's representation of numbers, pixels in an image - or just about
anything.

When Perl is processing "binary data", the programmer wants Perl to process
"sequences of bytes". This is not a problem for Perl - as a byte has 256
possible values, it easily fits in Perl's much larger "logical character".
EOF
