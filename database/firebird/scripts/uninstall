#!/bin/sh
#
#  Uninstall script for Firebird database engine
#  http://www.firebirdsql.org
#
#  *** Generated by Firebird installation script ***
#
#  Copyright (c) 2003 by IBPhoenix
#  Author: Pavel Cisar <pcisar@ibphoenix.com)
#  http://www.ibphoenix.com

Install=""
InstallType=""
Port=""
verbose=0

#------------------------------------------------------------------------
# Prompt for response, store result in Answer

AskQuestion() {
  Test=$1
  DefaultAns=$2
  echo -n "${1}"
  Answer="$DefaultAns"
  read Answer
}

#------------------------------------------------------------------------
# Prompt for yes or no answer - returns non-zero for no

AskYNQuestion() {

  while echo -n "${*} (y/n): "
  do
    read answer rest
    case $answer in
    [yY]*)
      answer="y"
      return 0
      ;;
    [nN]*)
      answer="n"
      return 1
      ;;
    *)
      echo "Please answer y or n"  ;;
    esac
done
}

#------------------------------------------------------------------------
#  Display message

displayMessage() {

  msgText=$*
  for msgText ;
    do echo $msgText ;
  done
}

#------------------------------------------------------------------------
#  Display message if this is being run with --verbose option.

verboseMessage() {

    msgText=$*
    if [ $((verbose)) -gt 0 ]
    then
      for msgText ;
        do echo $msgText ;
      done
    fi
}

#------------------------------------------------------------------------
# Display message and exit.

displayExitMessage() {

  echo ""
  echo "--- Warning ----------------------------------------------"
  echo ""
  for msgText ;
    do echo $msgText>&2 ;
  done
  echo ""
  echo "Uninstallation ABORTED."
  exit 1
}

#------------------------------------------------------------------------
# Run process and check status

runAndCheckExit() {
    Cmd=$*

    $Cmd
    ExitCode=$?

    if [ $ExitCode -ne 0 ]
      then
        echo "Uninstall aborted: The command $Cmd " 1>&2
        echo "                   failed with error code $ExitCode" 1>&2
        exit
    fi
}

#------------------------------------------------------------------------
# Check for correct run user

checkInstallUser() {

    if [ "`whoami`" != "root" ];
    then
      displayExitMessage "You need to be 'root' user to uninstall"
    fi
}

#-------------------------------------------------------
# File removal

removeFile() {

  file=$1
  if [ -e $file ] || [ -L $file ]
  then
    verboseMessage "Removing $file..."
    `rm $file`
  fi 
}

#-------------------------------------------------------
# Directory removal

removeDirectory() {

  directory=$1
  if [ -d $directory ] 
  then
    verboseMessage "Removing $directory directory..."
    `rmdir $directory`
  fi 
}
  
#------------------------------------------------------------------------
#  Stop super server if it is running 

stopServerIfRunning() {

    # First the easy one - the Super Server
    # We will try to shut it down only by control script...
    
    checkString=`ps -efww| egrep "([i|f]bserver|[i|f]bguard)" |grep -v grep`
    controlScript=""

    if [ ! -z "$checkString" ] 
    then
      # Look for firebird or interbase control script
      if [ -f /etc/init.d/firebird ]
      then
        controlScript="/etc/init.d/firebird stop"
      elif [ -f /etc/rc.d/init.d/firebird ]
      then
        controlScript="/etc/rc.d/init.d/firebird stop"
      elif [ -f /etc/init.d/interbase ]
      then
        controlScript="/etc/init.d/interbase stop"
      elif [ -f /etc/rc.d/init.d/interbase ]
      then
        controlScript="/etc/rc.d/init.d/interbase stop"
      fi
      if [ ! -z "$controlScript" ]
      then
        displayMessage "$Install is running, trying to shut it down..."
        $controlScript
      fi
    fi
    checkString=`ps -efww | egrep "([i|f]bserver|[i|f]bguard)" | grep -v grep`
    if [ ! -z "$checkString" ] 
    then
      displayExitMessage "An attempt to stop the running $Install failed." \
        "(the ibserver or ibguard process was detected running on your system)"  \
        "Please quit all Firebird/InterBase applications and then proceed." 
    fi

    # Classic is tricky, because if [fb|gds]_inet_server is present, someone
    # is attached remotely and we can't shut it down...
    # Unfortunatelly, we can't detect Classic that runs in local connection mode.
    
    checkString=`ps -efww | egrep "([fb|gds]_inet_server|gds_pipe)" | grep -v grep`

    if [ ! -z "$checkString" ] 
    then
      displayExitMessage "An instance of the $Install server seems to be running." \
        "(the gds_inet_server or gds_pipe process was detected running on your system)"  \
        "Please quit all Firebird/InterBase applications and then proceed." 
    fi
    
    # Stop lock manager if it is the only thing running.

    for i in `ps -efww | egrep "[fb|gds]_lock_mgr" | awk '{print $2}' `
     do
        kill $i
     done
}

#------------------------------------------------------------------------
# Execution of inetd/xinetd control script

serviceControl() {

    onlyonce=0
    for controlScript in /etc/init.d/$serviceControler /etc/rc.d/init.d/$serviceControler
    do
	if [ -x $controlScript ] && [ $onlyonce -eq 0 ]
        then
    	    displayMessage "Trying to $1 the $serviceControler service..."
	    $controlScript $1
	    onlyonce=1
        fi
    done
}

#------------------------------------------------------------------------
# Remove sevice entry in /etc/services and inetd/xinetd configuration

removeService() {

    checkString=`grep "^gds_db" /etc/services`
    if [ ! -z "$checkString" ]
    then
        configFile="/etc/services"
	displayMessage "Removing gds_db service..."
	cat $configFile | grep -v "^gds_db" > $configFile.tmp
	mv -b $configFile.tmp $configFile
    fi
    if [ "$InstallType" == "Classic" ]
    then
	displayMessage "Removing Firebird from $serviceControler configuration..."
	if [ "$serviceControler" == "inetd" ]
	then
	    configFile="/etc/inetd.conf"
	    checkString=`grep "^gds_db" $configFile`
	    if [ ! -z "$checkString" ]
	    then
		cat $configFile | grep -v "^gds_db" > $configFile.tmp
    		mv -b $configFile.tmp $configFile
	    fi
	else
	    # xinetd
	    if [ -d /etc/xinetd.d ]
	    then
		# Directory-based configuration
		configFile=`grep -l gds_db /etc/xinetd.d/*`
		if [ ! -z "$configFile" ]
		then
		    # Remove previous configuration file for gds_db service
		    rm $configFile
		fi
	    else
		# File-based configuration
		displayMessage "**** We don't know how to handle xinetd file-based configuration" \
		"Please remove gds_db service from file /etc/xinetd.conf"
	    fi
	fi
	# Restart control service
	serviceControl "restart"
    fi
}

#------------------------------------------------------------------------
# Remove Firebird from initd configuration

removeInitdScript() {

    if [ "$InstallType" == "Super Server" ]
    then
	displayMessage "Removing Firebird from initd..."
	if [ "$linuxDistro" == "SuSE" ]
	then
	    if [ -x /sbin/insserv ]
	    then
    		/sbin/insserv -d /etc/init.d/firebird
	    elif [ -x /sbin/chkconfig ]
	    then
    		/sbin/chkconfig --del firebird
	    fi
	    # Other SuSE specific configuration
	    displayMessage "Removing Firebird from SuSE Run-level configuration Wizard..."
	    if [ -e /etc/sysconfig/firebird ]
	    then
    		rm /etc/sysconfig/firebird
	    fi
	    if [ -x /bin/fillup ] && [ -e /etc/rc.config ]
	    then
		# Remove Firebird from /etc/rc.config
		cat <<EOF >$installDir/rc.config.firebird
#
# Start the Firebird RDBMS ?
#
START_FIREBIRD="yes"
EOF
    		/bin/fillup -m -r /etc/rc.config $installDir/rc.config.firebird
		rm $installDir/rc.config.firebird
		mv /etc/rc.config.new /etc/rc.config
	    fi
	else
	    if [ -x /sbin/chkconfig ]
	    then
    		/sbin/chkconfig --del firebird
	    else
		displayMessage "Install can't find /sbin/chkconfig to remove Firebird from initd." \
		"Please correct this problem manually." 
	    fi
	fi
    fi
}


#------------------------------------------------------------------------
# Show option list

showHelp() {

  echo "Uninstallation options:"
  echo ""
  echo "--help        This help"
  echo "--verbose     More verbose output"
  exit 1
}


#=======================================================
# Main uninstall script

  # Process CLI options
  
  for Option in $*
  do
    OptionValue=`echo "$Option" | cut -d'=' -f2`
    OptionName=`echo "$Option" | cut -d'=' -f1`
    case $OptionName in
      --help)
        showHelp ;;
      --verbose)
        verbose=1 ;;
      *)             
      echo "**** Unknown switch $OptionName ****" 
      echo ""
      ;;
    esac 
  done

