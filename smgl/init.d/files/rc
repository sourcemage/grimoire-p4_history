#!/bin/bash
#---------------------------------------------------------------------
# vim:set ts=2 sw=2 et:
#---------------------------------------------------------------------
##
##=head1 SYNOPSIS
##
##
##=head1 DESCRIPTION
##
##
##=head1 COPYRIGHT
##
## Copyright (C) 2003 Robert Helgesson <rycee@home.se>
## 
##=head1 FUNCTIONS
#---------------------------------------------------------------------

PATH="/sbin:/bin"
RUNLEVELS_DIR="/etc/init.d/runlevels"

# Get some configurations that alter the behavior of this script
. /etc/sysconfig/init
. /etc/init.d/smgl_functions


essential_script_failure()
{
  echo
  echo "Essential script failed..."
  echo
  sulogin
  reboot
}

######################
######################

# $1 - full path to directory
start_dir()
{
  (
    set $1 start
    [ -f "$1/runlevel.config" ] && . $1/runlevel.config
    . /etc/init.d/smgl_runlevel
  ) || essential_script_failure
}

# $1 - full path to directory
stop_dir()
{
  runlevel=${1#*%}
  echo "Leaving runlevel $runlevel..."
}

######################
######################

# $1 - runlevel to start
start()
{
  [ "$1" ] && target_runlevel=$1 || target_runlevel=default
  echo
  echo "Booting to runlevel $target_runlevel..."
  echo
  need "%$target_runlevel" || essential_script_failure
}

######################
######################

# $1 - requested runlevel
run_runlevel()
{
  [ $# -eq 0 ] && echo "missing runlevel argument" > /dev/stderr && exit 1
  local OK_ERR=
  (
    lvl=$1
    lvl_file="$RUNLEVELS_DIR/%$1"

    set $lvl_file switch

    trap "echo 'Got signal, exiting' ; exit 1" USR1

    if [ -d "$lvl_file" ] ; then
      [ -f "$lvl_file/runlevel.config" ] && . $lvl_file/runlevel.config
      . /etc/init.d/smgl_runlevel
    elif [ -f "$lvl_file" -a -x "$lvl_file" ] ; then
      . $lvl_file
    else
      echo "not a runlevel: $lvl" > /dev/stderr
      OK_ERR=1
    fi
  ) || essential_script_failure
  [ -n "$OK_ERR" ] && exit 1
}

# $1 - requested script
# $@ - arguments
run_script()
{
  local script=$1
  shift 2
  if [ $# -gt 0 ] ; then
    $RUNLEVELS_DIR/*/$script "$@"
  else
    echo "missing script argument" > /dev/stderr && exit 1
  fi
}

run_enable()
{
  local i
  for i in $*; do
    local FILE="$(ls $RUNLEVELS_DIR/*/"$i")"
    if [ ! -x "$FILE" ]; then
      chmod ug+x "$FILE" && echo "Service $i successfully enabled." && run_script "$i" "$i" start ||
      ( echo "an error occurred enabling service $i" > /dev/stderr && exit 1 )
    else
      echo "Service $i already enabled." > /dev/stderr
      INIT_FAIL_LOG=yes
    fi
  done
}

run_disable()
{
  local i
  for i in $*; do
    local FILE="$(ls $RUNLEVELS_DIR/*/"$i")"
    local SKIP=
    if [ -x "$FILE" ]; then
      . /etc/sorcery/config
      if grep -Fq 'ESSENTIAL=yes' "$FILE" ; then query "Are you sure you want to disable this ESSENTIAL script?" n || SKIP=yes; fi
      if [ -z "$SKIP" ] ; then
        run_script "$i" "$i" stop  && chmod ug-x "$FILE" && echo "Service $i successfully disabled." ||
          ( echo "an error occurred disabling service $i" > /dev/stderr && exit 1 )
      else
        echo "ESSENTIAL service $i skipped."
      fi
    else
      echo "Service $i already disabled." > /dev/stderr
      INIT_FAIL_LOG=yes
    fi
  done
}

run_delete()
{
  local i
  for i in $*; do
    local FILE="$(ls $RUNLEVELS_DIR/*/"$i")"
    local SKIP=
    if [ ! -x "$FILE" ]; then
      . /etc/sorcery/config
      if grep -Fq 'ESSENTIAL=yes' "$FILE" ; then
        query "Are you sure you want to DELETE this ESSENTIAL script?" n || SKIP=yes
      else
        query "Are you sure you want to DELETE this script?" n || SKIP=yes
      fi
      if [ -z "$SKIP" ] ; then
        rm "$FILE" && echo "Service $i successfully deleted." ||
          ( echo "an error occurred deleting service $i" > /dev/stderr && exit 1 )
      else
        echo "Delete of service $i skipped."
      fi
    else
      echo "Service $i is enabled, please disable it first." > /dev/stderr
      INIT_FAIL_LOG=yes
    fi
  done
}

run_bootenable()
{
  local i
  for i in $*; do
    local FILE="$(ls $RUNLEVELS_DIR/*/"$i")"
    if [ ! -x "$FILE" ]; then
      chmod ug+x "$FILE" && echo "Service $i successfully enabled." ||
      ( echo "an error occurred enabling service $i" > /dev/stderr && exit 1 )
    else
      echo "Service $i already enabled." > /dev/stderr
      INIT_FAIL_LOG=yes
    fi
  done
}

run_bootdisable()
{
  local i
  for i in $*; do
    local FILE="$(ls $RUNLEVELS_DIR/*/"$i")"
    local SKIP=
    if [ -x "$FILE" ]; then
      . /etc/sorcery/config
      if grep -Fq 'ESSENTIAL=yes' "$FILE" ; then query "Are you sure you want to disable this ESSENTIAL script?" n || SKIP=yes; fi
      if [ -z "$SKIP" ] ; then
        chmod ug-x "$FILE" && echo "Service $i successfully disabled." ||
          ( echo "an error occurred disabling service $i" > /dev/stderr && exit 1 )
      else
        echo "ESSENTIAL service $i skipped."
      fi
    else
      echo "Service $i already disabled." > /dev/stderr
      INIT_FAIL_LOG=yes
    fi
  done
}

run_enabled()
{ 
  ls -l "$RUNLEVELS_DIR"/*/* | grep -v runlevel.config$ | grep "^...x..x" | sed -e 's!^.*/!!'
}

run_disabled()
{ 
  ls -l "$RUNLEVELS_DIR"/*/* | grep -v runlevel.config$ | grep -v "^...x..x" | sed -e 's!^.*/!!'
}

run_list()
{ 
  echo "RUNLEVEL SCRIPT"
  ls -l "$RUNLEVELS_DIR"/*/* | grep -v runlevel.config | sed -e 's!^.*/%\(.*\)/!\1        !'
}

run_move()
{
  local FILE="$(ls $RUNLEVELS_DIR/*/"$1" 2> /dev/null)"
  if [ -f "$FILE" ] ; then
    if [ -d "$RUNLEVELS_DIR/%$2" ] ; then
      local OLD_RUNLEVEL="$(echo "$FILE" | sed -e 's!^/.*/%!!' | cut -d'/' -f1)"
      if [ "$OLD_RUNLEVEL" != "$2" ] ; then
        mv "$FILE" "$RUNLEVELS_DIR/%$2" &&
        echo "Script $1 moved from runlevel $OLD_RUNLEVEL to runlevel $2." || exit 1
      else
        echo "Script $1 already in runlevel $2." && exit 1
      fi
    else
      echo "runlevel $2 is not a valid runlevel container." > /dev/stderr
      echo "valid runlevel containers are:" > /dev/stderr
      ls -ld "$RUNLEVELS_DIR"/* | grep "^d" | sed -e 's!^.*/%!!' > /dev/stderr
      exit 1
    fi
  else
    echo "script $1 does not exist" > /dev/stderr
    exit 1
  fi
}

run_runlevels()
{
  echo "TYPE RUNLEVEL"
  ls -ld "$RUNLEVELS_DIR"/%* | sed -e 's! -> /.*/%! -> !' -e 's!^\(.\).*/%!\1    !'
}

run_install()
{
  if [ -f "$1" ] ; then
    if [ -d "$RUNLEVELS_DIR/%$2" ] ; then
      cp "$1" "$RUNLEVELS_DIR/%$2" &&
      echo "Script $1 installed to runlevel $2." || exit 1
    else
      echo "runlevel $2 is not a valid runlevel container." > /dev/stderr
      echo "valid runlevel containers are:" > /dev/stderr
      ls -ld "$RUNLEVELS_DIR"/* | grep -v "^d" | sed -e 's!^.*/%!!' > /dev/stderr
      exit 1
    fi
  else
    echo "file $1 does not exist" > /dev/stderr
    exit 1
  fi
}

telinit()
{
  local FAIL=no
  (
  INIT_FAIL_LOG=
  case "$1" in
    run)           shift; run_script       "$1" "$@" ;;
    switch)        shift; run_runlevel     "$1"      ;;
    enable)        shift; run_enable       "$@"      ;;
    disable)       shift; run_disable      "$@"      ;;
    bootenable)    shift; run_bootenable   "$@"      ;;
    bootdisable)   shift; run_bootdisable  "$@"      ;;
    delete)        shift; run_delete       "$@"      ;;
    enabled)       shift; run_enabled                ;;
    disabled)      shift; run_disabled               ;;
    list)          shift; run_list                   ;;
    runlevels)     shift; run_runlevels              ;;
    move)          shift; run_move         "$1" "$2" ;;
    install)       shift; run_install      "$1" "$2" ;;
    *)             cat > /dev/stderr << EOF
usage:
telinit run <script> [<args>]        run init <script> with arguments <args>
telinit switch <rlvl>                switch to runlevel <rlvl>
telinit enable [<script> ... ]       enable and start <script> if not enabled
telinit disable [<script> ... ]      stop and disable <script> if not disabled
telinit bootenable [<script> ... ]   enable <script> if not enabled
telinit bootdisable [<script> ... ]  disable <script> if not disabled
telinit delete [<script> ... ]       delete <script> if disabled
telinit enabled                      list enabled startup scripts
telinit disabled                     list disabled startup scripts
telinit list                         list startup scripts and their runlevels
telinit runlevels                    list all runlevels
telinit move <script> <rlvl>         move <script> to runlevel <rlvl>
telinit install <file> <rlvl>        install <file> into runlevel <rlvl>
EOF
    exit 1
    ;;
  esac
  [ "$INIT_FAIL_LOG" == "yes" ]  && exit 1
  true
  ) || FAIL=yes
  case "$1" in
    run|switch|enabled|disabled|list|runlevels) exit 0 ;;
  esac
  [ "$FAIL" == "no" ]  ;  evaluate_retval
  [ "$FAIL" == "yes" ] && exit 1
}


######################

#echo -$0- -$1- -$2- -$3-

case "$1" in
  start-dir)  start_dir $2        ;;
  stop-dir)   stop_dir $2         ;;
  start)      start $2            ;;
  stop)       true                ;;
  telinit)    shift; telinit "$@" ;;
  *)          echo "Bad argument: $1"
              exit 1
              ;;
esac


#---------------------------------------------------------------------
##=back
##
##=head1 LICENSE
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#---------------------------------------------------------------------
