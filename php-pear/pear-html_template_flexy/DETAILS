         VERSION=1.2.3
     SOURCE_HASH='sha512:4320cc5ed549266e0c3a092db679b39a9cd3cccb93569a7fa6ede4d2748c244921c3a3e9c53ce545413a5eff395c74ef7854512b4c7b81790b4b86169ba67570'
         UPDATED=20051108
           SPELL=pear-html_template_flexy
    PEAR_PACKAGE=HTML_Template_Flexy
        WEB_SITE=http://pear.php.net/package/HTML_Template_Flexy/
      LICENSE[0]=PHP
           SHORT='PEAR: An extremely powerful Tokenizer driven Template'
cat << EOF
HTML_Template_Flexy started it's life as a
simplification of HTML_Template_Xipe,
however in Version 0.2, It became one of the
first template engine to use a real Lexer,
rather than regex'es, making it possible to do
things like ASP.net or Cold Fusion tags.
However, it still has a very simple set of
goals.
- Very Simple API,
o easy to learn...
o prevents to much logic going in templates
- Easy to write document'able code
o By using object vars for a template rather
than 'assign', you
can use phpdoc comments to list what
variable you use.
- Editable in WYSIWYG editors
o you can create full featured templates,
that doesnt get broken every time you edit with
Dreamweaver(tm) or Mozilla editor
o Uses namespaced attributes to add
looping/conditionals
- Extremely Fast,
o runtime is at least 4 time smaller than
most other template engines (eg. Smarty)
o uses compiled templates, as a result it is
many times faster on blocks and loops than
than Regex templates (eg. IT/phplib)
- Safer (for cross site scripting attacks)
o All variables default to be output as HTML
escaped (overridden with the :h modifier)
- Multilanguage support
o Parses strings out of template, so you can
build translation tools
o Compiles language specific templates (so
translation is only done once, not on every
request)
- Full dynamic element support (like ASP.NET),
so you can pick elements to replace at runtime
Features:
- {variable} to echo $object->variable
- {method()} to echo $object->method();
- {foreach:var,key,value} to PHP foreach loops
- tag attributes FLEXY:FOREACH, FLEXY:IF for
looping and conditional HTML inclusion
- {if:variable} to PHP If statement
- {if:method()} to PHP If statement
- {else:} and {end:} to close or alternate If
statements
- FORM to HTML_Template_Flexy_Element's
- replacement of INPUT, TEXTAREA and SELECT
tags with HTML_Template_Flexy_Element code
use FLEXY:IGNORE (inherited) and
FLEXY:IGNOREONLY (single) to prevent
replacements
- FLEXY:START/FLEXY:STARTCHILDREN tags to
define where template starts/finishes
- support for urlencoded braces {} in HTML
attributes.
- documentation in the pear manual
- examples at
http://cvs.php.net/cvs.php/pear/HTML_Template_Flexy/tests/
** The long term plan for Flexy is to be
integrated as a backend for the
Future Template Package (A BC wrapper will be
made available - as I need
to use it too!)
EOF

source  $SECTION_DIRECTORY/PEAR_DETAILS
