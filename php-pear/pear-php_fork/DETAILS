         VERSION=0.3.0
     SOURCE_HASH='sha512:6c8e0be9930307e0a1b4eaa1872704aa5c8cdbe59f3c927891323fbddbdfe6be864b9fe6d6cc9ce89e1f195293b641ac7a5f11a368ddd604d59fc44aed267f23'
         UPDATED=20051125
           SPELL=pear-php_fork
    PEAR_PACKAGE=PHP_Fork
        WEB_SITE=http://pear.php.net/package/PHP_Fork/
      LICENSE[0]=PHP
           SHORT='PEAR: PHP_Fork class. Wrapper around the pcntl_fork()'
cat << EOF
PHP_Fork class. Wrapper around the pcntl_fork()
stuff
with a API set like Java language.
Practical usage is done by extending this
class, and re-defining
the run() method.
[see basic example]
This way PHP developers can enclose logic into
a class that extends
PHP_Fork, then execute the start() method that
forks a child process.
Communications with the forked process is
ensured by using a Shared Memory
Segment; by using a user-defined signal and
this shared memory developers
can access to child process methods that
returns a serializable variable.
The shared variable space can be accessed with
the tho methods:
o void setVariable($name, $value)
o mixed getVariable($name)
$name must be a valid PHP variable name;
$value must be a variable or a serializable
object.
Resources (db connections, streams, etc.)
cannot be serialized and so they're not
correctly handled.
Requires PHP build with --enable-cli
--with-pcntl --enable-shmop.
Only runs on *NIX systems, because Windows
lacks of the pcntl ext.
@example browser_pool.php an interactive tool
to perform multiple cuncurrent request over an
URL.
@example simple_controller.php shows how to
attach a controller to started pseudo-threads.
@example exec_methods.php shows a workaround to
execute methods into the child process.
@example passing_vars.php shows variable
exchange between the parent process and started
pseudo-threads.
@example basic.php a basic example, only two
pseudo-threads that increment a counter
simultaneously.
EOF

source  $SECTION_DIRECTORY/PEAR_DETAILS
