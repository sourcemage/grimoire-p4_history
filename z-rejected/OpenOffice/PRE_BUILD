#!/bin/bash
# PRE_BUILD for rejected spells
#
# Modified 2002 Aug 23 05:10 by Derek Moyes <sorcerer@flamesnyper.com>
#   Default behavior changed to NOT AUTOMATICALLY install or update rejected
#     spells. This prevents silly third-party install scripts from halting a
#     sorcery update, while waiting for input.
#   Added test for UNATTEND_SAFE placeholder file in the spell. This file skips
#     the warning altogether & allows the spell to cast automatically. Simply
#     create an empty file named UNATTEND_SAFE in the spell's directory.
#   Check if spell installed routine added (thx to dufflebunk for bash help).
#   Comments added for future BASHers.
#   Warning text clarified & expanded.
#   Sorcery colors added.

# Test if spell is already installed.
if  !  [ `gaze installed $SPELL | cut -d" " -f3` == "not" ];  then PRE_BUILD_SPELL_INSTALLED="is";  else PRE_BUILD_SPELL_INSTALLED="is NOT";  fi

#Test if spell is UNATTEND_SAFE.
if  [ -e $SCRIPT_DIRECTORY/UNATTEND_SAFE ];  then  PRE_BUILD_SPELL_UNATTEND_SAFE="is";  else PRE_BUILD_SPELL_UNATTEND_SAFE="is NOT";  fi

# Warn user about problems with spell.
message  "${MESSAGE_COLOR}This spell is considered ${PROBLEM_COLOR}rejected${DEFAULT_COLOR}${MESSAGE_COLOR} because the software it installs "                                    \
         " $REJECT."  \
         ""  \
         " Please view this software's website for more information:${DEFAULT_COLOR}"              \
	 " `gaze website $SPELL`${MESSAGE_COLOR}"                                                  \
         ""  \
         " You may continue casting the spell and it will still be tracked by Sorcery."            \
         " However, the software's installation process may have questions that need"              \
	 " answered and/or licensing agreements that must be agreed to."                           \
	 ""

# Ask if user wants to continue anyway. (defaults to NO), unless running in UNATTEND_SAFE mode.
  if  [[ $PRE_BUILD_SPELL_INSTALLED == "is" && $PRE_BUILD_SPELL_UNATTEND_SAFE == "is" ]]; then
    message  " ${MESSAGE_COLOR}$SPELL ${FILE_COLOR}is${DEFAULT_COLOR}${MESSAGE_COLOR} previously installed, and has been determined to be ${FILE_COLOR}UNATTEND_SAFE${DEFAULT_COLOR}${MESSAGE_COLOR},"  \
             " so the prompt will be skipped.${DEFAULT_COLOR}"
  else
    message  " Allowing the next question to timeout will choose not to install this spell."  \
      	     " ${PROBLEM_COLOR}This means that rejected spells will NOT be installed or updated automatically.${DEFAULT_COLOR}${MESSAGE_COLOR}"  \
	     ""  \
	     " If you want a rejected spell to be installed or updated you must:"             \
	     " hit ${FILE_COLOR}y${DEFAULT_COLOR}${MESSAGE_COLOR} now or perform ${FILE_COLOR}cast -r -c${DEFAULT_COLOR}${MESSAGE_COLOR} later.${DEFAULT_COLOR}"  \
	     ""
	     
      if  query  "${MESSAGE_COLOR}To CONTINUE casting enter a 'y': ${DEFAULT_COLOR}"  n;  then
        message  ""  \
	         "${MESSAGE_COLOR}Ok, here we go... you're on your own!${DEFAULT_COLOR}"
      else
        message  ""  \
	         "${MESSAGE_COLOR}You chose to stop the installation, or you let the prompt timeout. Maybe"  \
                 " you'll be braver next time?${DEFAULT_COLOR}"
	exit 1
      fi
   fi

if ! query "${MESSAGE_COLOR}For $SPELL to cast, you NEED to be root with access to an X display, otherwise this will fail in the end.  Is the above true?${DEFAULT_COLOR}" n ; then
	exit 1
fi

if ! test "`gaze installed bison`" = "1.75" && ! test "`gaze installed bison`" = "1.35" ; then
	if ! query "${MESSAGE_COLOR}For $SPELL to cast, you also NEED to have a version of Bison = to 1.75 || 1.35, otherwise this will fail with various errors during compile. All you need to do is a 'dispel -d bison 1.75' before casting $SPELL. Is the above true?${DEFAULT_COLOR}" n ; then
		exit 1
	fi
fi

if [ -f /usr/include/jni.h ] ; then
	mv /usr/include/jni.h /usr/include/jni_gcc.h
fi                                     &&
if  [  -z  $JAVA_HOME  ]
then
  export JAVA_HOME="/opt/java/j2sdk/"
fi					&&
mk_source_dir	$SOURCE_DIRECTORY  4g	&&
cd		$BUILD_DIRECTORY	&&
unpack		$SOURCE	${MD5[0]}	&&
#default_pre_build                      &&
export MOZ_PREFIX=/usr			&&
cd  ${SOURCE_DIRECTORY}/external/gpc	&&
unpack $SOURCE2 ${MD5[1]}              &&
mv gpc231/gpc* .                       &&
rm -rf gpc231                          &&
cd ${SOURCE_DIRECTORY}                 &&

for file in $SOURCE_CACHE/$SOURCE3     \
	$SOURCE_CACHE/$SOURCE5         \
	$SOURCE_CACHE/$SOURCE6         \
	$SOURCE_CACHE/$SOURCE7         \
	$SOURCE_CACHE/$SOURCE8         \
	$SOURCE_CACHE/$SOURCE9         \
	$SOURCE_CACHE/$SOURCE10        \
	$SOURCE_CACHE/$SOURCE11        \
	$SOURCE_CACHE/$SOURCE12        \
	$SOURCE_CACHE/$SOURCE13        \
	$SOURCE_CACHE/$SOURCE14        \
	$SOURCE_CACHE/$SOURCE15        \
	$SOURCE_CACHE/$SOURCE16        \
	$SOURCE_CACHE/$SOURCE17        \
	$SOURCE_CACHE/$SOURCE18        \
	$SOURCE_CACHE/$SOURCE19        \
	$SOURCE_CACHE/$SOURCE20        \
	$SOURCE_CACHE/$SOURCE21        \
	$SOURCE_CACHE/$SOURCE22        \
	$SOURCE_CACHE/$SOURCE23        \
	$SOURCE_CACHE/$SOURCE25
do
	message "${MESSAGE_COLOR} Applying patch ${file} ${DEFAULT_COLOR}"
#	bunzip2 -k -c $file | patch -p1
	patch -p1 < $file
done					&&

if ! spell_installed "Linux-PAM"; then
    cp ${SOURCE_CACHE}/${SOURCE4} /	&&
    cd / 				&&
    tar -xzf $SOURCE4 			&&
    rm $SOURCE4 			&&
    cd ${SOURCE_DIRECTORY}
fi
