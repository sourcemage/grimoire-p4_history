#!/bin/sh
########################## Begin Install Script ##########################
#
# NAME:         ACE-install.sh
#
# PURPOSE:      Bourne shell script to install ACE for UNIX platforms
#
# AUTHOR:       Ajit Sagar <asagar@spdmail.spd.dsccc.com>
#
# HISTORY:      5/20/96     Ajit Sagar          Created
#               13/10/03    Eric Schabell       Modified for SMGL.
#
# DESCRIPTION:  This script installs the ACE toolkit for a Unix system.
#
# USAGE:        myacemaker [ auto ]
#
#               auto       automatic make (no user interaction)
#
#                          Under this option, the source will be
#                          extracted and compiled without any user interaction,
#                          i.e., you can kick off this script, go home,
#                          and check it in the morning. The following
#                          assumptions are made:
#
#                            1) MY_ACE_DIR is properly defined in this script.
#                            2) MY_ACE_CONFIG is properlly defined
#                               in this script.
#                            3) MY_ACE_GNU_MACROS is properly defined in this
#                               script.
#                            4) A backup of existing installation
#                               is to be made.
#
# COPYRIGHT INFORMATION:
#
# You are free to do anything you like with this script such as
# including it in commercial software. You may modify it and freely redistribute
# it. The author accepts no responsibility for any bugs or problems that
# arise as a consequence of using this code.
#
# -- Ajit Sagar
#
#########################################################################
#
#source /etc/sorcery/config
source /var/lib/sorcery/modules/libgrimoire

ACE_ERRFILE=/tmp/myacemaker.err
OLD_ACE_TAR_FILE=oldACE.tar
OLD_ACE_GZIPPED_TAR_FILE=oldACE.tar.gz

USAGE="<Usage> : myacemaker [ auto ]"
#
##############################################################
#
# Platform-specific definitions
#
##############################################################

# Directory where ACE-x.x.xx.tar.gz is located

MY_ACEDIR=/usr/src
ACE_ROOT=/usr/lib/ACE

#######################################################
# Platform specific config file in ${ACE_ROOT}/ace/
# Uncomment and redefine this
#######################################################

MY_ACE_CONFIG=config-linux.h

#######################################################
# Platform specific GNU macros file in
# ${ACE_ROOT}/include/makeinclude/
# Uncomment and redefine this
#######################################################

MY_ACE_GNU_MACROS=platform_linux.GNU


##############################################################
#
# Main Script For Installing ACE
#
##############################################################

AUTO="$#"

ACE_ROOT=${ACE_ROOT:?"ERROR: Environment variable ACE_ROOT not set"} 
if [ ${AUTO} -gt 1 ]
then
  echo "$USAGE"
  exit 1
fi

if [ ${AUTO} -eq 1 ]
then
  if [ $1 != "auto" ]
  then
    if [ $1 = "nounzip" ] ; then
      UNZIP=0
      AUTO=0
    else
      echo "$USAGE"
      exit 2
    fi
  fi
fi

echo ""
echo "ACE will be installed in ${ACE_ROOT}"
echo ""

if [ $AUTO -eq 0 ]
then
  echo "OK to continue? [Y/N] : "
  read choice
else
  choice='Y'
fi

if [ ${choice} != 'Y' -a ${choice} != 'y' ]
then
  echo ""
  echo "ACE installation aborted"
  echo ""
  exit 11
fi

echo "Moving `pwd`/ACE_wrappers to ${ACE_ROOT} ..."
if [ -d ${ACE_ROOT}  ]
then
	rm -rf ${ACE_ROOT}
	mkdir ${ACE_ROOT}
  mv ${MY_ACEDIR}/ACE_wrappers/* ${ACE_ROOT}/
  echo ""
else
	mkdir ${ACE_ROOT}
  mv ${MY_ACEDIR}/ACE_wrappers/* ${ACE_ROOT}/
  echo ""
fi	

cd ${ACE_ROOT}/ace

if [ ${MY_ACE_CONFIG:-undefined} = undefined ]
then

  if [ $AUTO -eq 1 ]
  then
    if [ ! -f ${MY_ACE_CONFIG} ]
    then
      echo ""
      echo "${MY_ACE_CONFIG} does not exist. Aborting script ..."
      echo ""
      exit 44
    fi
  fi

  echo "Select one of the following files for linking to config.h"
  echo ""
  echo "`ls config*h`"
  echo ""

  echo "Type the filename for your compiler:  "
  read MY_ACE_CONFIG
  echo ""

  if [ ! -f ${MY_ACE_CONFIG} ]
  then
    echo ""
    echo "${MY_ACE_CONFIG} does not exist. Aborting script ..."
    echo ""
    exit 55
  fi

fi


echo "Creating link config.h for ${MY_ACE_CONFIG} in directory `pwd` ..."
if [ -e config.h ]
then
  rm ./config.h
  ln -s ${MY_ACE_CONFIG} config.h
else
  ln -s ${MY_ACE_CONFIG} config.h
fi
echo ""

cd ${ACE_ROOT}/include/makeinclude

if [ ${MY_ACE_GNU_MACROS:-undefined} = undefined ]
then

  if [ $AUTO -eq 1 ]
  then
    if [ ! -f ${MY_ACE_GNU_MACROS} ]
    then
      echo ""
      echo "${MY_ACE_GNU_MACROS} does not exist. Aborting script ..."
      echo ""
      exit 66
    fi
  fi

  echo "Select one of the following files for linking to config.h"
  echo ""
  echo "`ls platform*GNU`"
  echo ""
  echo "Type the filename for your compiler:  "

  read MY_ACE_GNU_MACROS
  echo ""

  if [ ! -f ${MY_ACE_GNU_MACROS} ]
  then
    echo ""
    echo "${MY_ACE_GNU_MACROS} does not exist. Aborting script ..."
    echo ""
    exit 77
  fi

fi

echo "Creating link platform_macros.GNU for ${MY_ACE_GNU_MACROS}"
echo "in directory `pwd` ..."

if [ -e platform_macros.GNU ]
then
	rm ./platform_macros.GNU 
	ln -s ${MY_ACE_GNU_MACROS} platform_macros.GNU 
else
	ln -s ${MY_ACE_GNU_MACROS} platform_macros.GNU 
fi
echo ""

if [ ${AUTO} -eq 0 ]
then
  echo "Make ACE now with default setup? [Y/N] : "
  read choice
  echo ""
else
  choice='Y'
fi

if [ ${choice} != 'Y' -a ${choice} != 'y' ]
then
  echo ""
  echo "ACE make skipped. You can use <make> to make ACE later"
  echo ""
  exit 0
fi

echo ""
echo "Making ACE now. Examine file ${ACE_ERRFILE} for errors ..."
echo ""

cd ${ACE_ROOT}

echo ""
echo "Executing <make> ..."
echo ""
make 

echo ""
echo "********** End of myacemaker script !!! ***********"
echo ""

#
#########################################################################
