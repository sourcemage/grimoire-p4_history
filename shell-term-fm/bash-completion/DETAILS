           SPELL=bash-completion
         VERSION=20060301
     SOURCE_HASH='sha512:49acd7e2b538ccf9c197a9117cb32e30bfe1f3404f7d983f069b132d784ae77eaf98db2b052291ac65986492143b68bc7cbc833dc4179390560e8a83a2b0b833'
          SOURCE=$SPELL-$VERSION.tar.bz2
SOURCE_DIRECTORY=$BUILD_DIRECTORY/bash_completion
   SOURCE_URL[0]=http://www.caliban.org/files/bash/$SOURCE
        WEB_SITE=http://www.caliban.org/bash/index.shtml#completion
        BUILD_API=2
         ENTERED=20020215
         UPDATED=20040127
      LICENSE[0]=GPL
        KEYWORDS="bash console"
           SHORT="bash programmable completion"
cat << EOF
bash programmable completion.
Since v2.04, bash has allowed you to intelligently program and extend
its standard completion behavior to achieve complex command lines with
just a few keystrokes. Imagine typing ssh [Tab] and being able to
complete on hosts from your ~/.ssh/known_hosts files. Or typing
man 3 str [Tab] and getting a list of all string handling functions in
the UNIX manual. mount system: [Tab] would complete on all exported
file-systems from the host called system, while make [Tab] would
complete on all targets in Makefile. This project was conceived to
produce programmable completion routines for the most common Linux/UNIX
commands, reducing the amount of typing sysadmins and programmers need
to do on a daily basis.

NOTE: The code to start completion is installed in /etc/profile.d/bash_completion.sh
      Existing users might need sourcing /etc/profile.d/* added manually.
      New users will have it automatically added.

      The SMGL specific completions are adapted from a patch by 
      Lunar_fr (lunar@l-a-p.org).
EOF
