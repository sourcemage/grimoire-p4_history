#compdef gaze

_gaze () {
    
  # Define global values
  # _gaze_cmds, _gaze_cmds_needs_spells, _gaze_cmds_need_installed_spells, 
  if (( ! $+_gaze_cmds )); then
    typeset -g _gaze_cmds
    _gaze_cmds=(
	alien from search service what where website compile sources \
	history sum md5sum export import section mainteinar grimoire \
	html newer older prune voyeur pam orphans depends install installed
	)
  fi

  if (( ! $+_gaze_cmds_needs_spell )); then
    typeset -g _gaze_cmds_needs_spell
    _gaze_cmds_needs_spell=(
	what where website compile sources history sum md5sum section \
	mainteinar prune voyeur depends 
	)
  fi

  if (( ! $+_gaze_cmds_needs_installed_spell )); then
    typeset -g _gaze_cmds_needs_installed_spell
    _gaze_cmds_needs_installed_spell=(sum md5sum install installed)
  fi

    _arguments -s \
    '*::gaze command:_gaze_command'

}

# Define gaze command dispatch function.
(( $+functions[_gaze_command] )) ||
_gaze_command () {
    	    
  # complete command
  if (( CURRENT == 1 )); then
    _tags comands && {compadd ${_gaze_cmds} }

  # complete commands argument
  elif (( CURRENT == 2 )); then
    local curcontext="$curcontext"
    local cmd="${words[1]}"

    # start argument completion
    if [[ $cmd == "from" ]]; then
	_files
    elif ( for i in $_gaze_cmds_needs_spell ; do
	     if [[ $cmd == $i ]]; then
		exit 0
	     fi
	   done; exit 1
	) ; then
	_spells
    elif ( for i in $_gaze_cmds_needs_installed_spell ; do
	     if [[ $cmd == $i ]]; then
		exit 0
	     fi
	   done; exit 1
	) ; then
	_installed_spells
    else
      false
    fi
    
  # "gaze" dosen't need 3rd (or more) argument.
  else
    false
  fi
}

_gaze "$@"






