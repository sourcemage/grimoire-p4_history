--- oddcastv2_xmms-2.0.1_org/src/oddcastv2_xmms_effect/dsp_oddcast_xmms.cpp	2003-05-03 12:41:47.000000000 -0700
+++ oddcastv2_xmms-2.0.1/src/oddcastv2_xmms_effect/dsp_oddcast_xmms.cpp	2003-09-18 16:51:30.000000000 -0700
@@ -68,11 +68,6 @@
 
 #define APPNAME "oddcast_effect"
 
-void mysignal(int sig) {
-	exit(1);
-}
-
-
 void on_save_clicked(GtkButton *button, gpointer user_data)
 {
 	memset(gPipePath, '\000', sizeof(gPipePath));
@@ -81,6 +76,7 @@
 	initialized = 0;
 	if (namedPipe) {
 		fclose(namedPipe);
+		namedPipe = NULL;
 	}
 	initializePipe();
 
@@ -216,23 +212,6 @@
 	return title;
 }
 
-void checkIfSelected(int *selected, int *enabled)
-{
-	EffectPlugin	*pPlugin = NULL;
-
-	pPlugin = get_current_effect_plugin();
-	if (pPlugin) {
-		if (pPlugin == &oddcastv2_vtable) {
-			*selected = 1;
-		}
-	}
-
-	if (*selected) {
-		*enabled = effects_enabled();
-	}
-}
-
-
 int terminatePipe()
 {
 	OddAudio	audioData;
@@ -252,11 +231,14 @@
 	}
 	if (namedPipe) {
 		fclose(namedPipe);
+		namedPipe = NULL;
 	}
 	void	*returnVal;
-	pthread_kill(id, SIGUSR1);
+	//pthread_kill(id, SIGUSR1);
+	pthread_cancel(id);
 	pthread_join(id, &returnVal);
 }
+
 static void *
 oddcastv2_thread (void *param)
 {
@@ -264,7 +246,9 @@
 	char command[1024] = "";
 	char buf[1024] = "";
 	FILE	*filep;
-	sprintf(command, "oddcastv2 %s oddcast_xmms.log oddcast_xmms.cfg", (char *)param);
+	// store settings in ~/.oddcast rather than some random folder
+	system("mkdir ~/.oddcastv2");
+	sprintf(command, "oddcastv2 %s ~/.oddcastv2/oddcast_xmms.log ~/.oddcastv2/oddcast_xmms.cfg", (char *)param);
 	filep = popen(command, "r");
 	while (!feof(filep)) {
 		memset(buf, '\000', sizeof(buf));
@@ -308,29 +292,6 @@
 		}
 		if (ok) {
 				pthread_create (&id, NULL, oddcastv2_thread, gPipePath);
-				/*
-				int pid = 0;
-				if ((pid = fork()) < 0) {
-						fprintf(stderr, "Fork error\n");
-						exit(1);
-				}
-				else if (pid == 0) {
-						char command[1024] = "";
-						char buf[1024] = "";
-						FILE	*filep;
-						sprintf(command, "oddcastv2 %s oddcast_xmms.log oddcast_xmms.cfg");
-						filep = popen(command, "r");
-						while (!feof(filep)) {
-							memset(buf, '\000', sizeof(buf));
-							fgets(buf, sizeof(buf)-1, filep);
-							fprintf(stdout, "%s\n", buf);
-						}
-						fprintf(stdout, "Exiting\n");
-						exit(1);
-				}
-				*/
-
-				//oddcast_pid = pid;
 				initialized = 1;
 		}
 		else {
@@ -338,26 +299,13 @@
 		}
 	}
 }
+
 // Here is the entry point for the Plugin..this gets called first.
 void oddcast_init(void)
 {
-
-	int	weareselected = 0;
-	int	weareenabled = 0;
-
-
 	if (!initialized) {
 		read_config();
-
-	// whack the Pipe, just in case
-			
-		checkIfSelected(&weareselected, &weareenabled);
-
-		if (weareselected && weareenabled) {
-			signal(SIGUSR1, mysignal);
-			
-			initializePipe();
-		}
+		initializePipe();
 	}
 }
 
@@ -365,19 +313,17 @@
 {
 	oddcast_display_config();
 }
+
 // cleanup (opposite of init()). Destroys the window, unregisters the window class
 void oddcast_cleanup()
 {
-	terminatePipe();	
-/*
-	char command[1024] = "";
-	sprintf(command, "rm %s", gPipePath);
-	system(command);
-	if (oddcast_pid >= 0) {
-			kill(oddcast_pid, SIGUSR1);
+	if ( initialized )
+	{
+		terminatePipe();
+		initialized = 0;
 	}
-*/
 }
+
 void oddcast_about()
 {
 	;
@@ -385,8 +331,6 @@
 
 int oddcast_mod_samples(gpointer *data, int length, AFormat fmt, gint srate, gint nch)
 {
-	int	weareselected = 0;
-	int	weareenabled = 0;
 	OddAudio	audioData;
 	static	char currentSong[1024] = "";
 
@@ -398,39 +342,36 @@
 	float	*samples;
 	short int *samples_int;
 
-	checkIfSelected(&weareselected, &weareenabled);
-
-	if (weareselected && weareenabled) {
-		if (!initialized) {
-			initializePipe();
-		}
-		//encode_samples((short int *)*data, length/(2), 0, nch, srate);
-		audioData.metadatalength = 0;
-		if (strcmp(currentSong, getCurrentlyPlaying())) {
-				strcpy(currentSong, getCurrentlyPlaying());
-				audioData.metadatalength = strlen(currentSong);
-		}
-
-		audioData.numsamples = (length / sizeof(short))/nch;
-		
-		audioData.samplelength = nch*audioData.numsamples*(sizeof(float));
-		samples = (float *)malloc(audioData.samplelength);
-		samples_int = (short int *)*data;
+	if (!initialized) {
+		initializePipe();
+	}
+	//encode_samples((short int *)*data, length/(2), 0, nch, srate);
+	audioData.metadatalength = 0;
+	if (strncmp(currentSong, getCurrentlyPlaying(), 1023)) {
+			strncpy(currentSong, getCurrentlyPlaying(),1023);
+			currentSong[1023] = '\0';
+			audioData.metadatalength = strlen(currentSong);
+	}
+
+	audioData.numsamples = (length / sizeof(short))/nch;
+	
+	audioData.samplelength = nch*audioData.numsamples*(sizeof(float));
+	samples = (float *)malloc(audioData.samplelength);
+	samples_int = (short int *)*data;
 
-		for (int i=0;i<audioData.numsamples*nch;i++) {
-			samples[i] = samples_int[i]/32767.f;
-		}
+	for (int i=0;i<audioData.numsamples*nch;i++) {
+		samples[i] = samples_int[i]/32767.f;
+	}
 
-		if (namedPipe) {
-				fwrite(&audioData, 1, sizeof(audioData), namedPipe);
-				if (audioData.metadatalength) { 
-						fwrite(currentSong, 1, audioData.metadatalength, namedPipe);
-				}
-				fwrite(samples, 1, audioData.samplelength, namedPipe);
-		}
-		if (samples) {
-			free(samples);
-		}
+	if (namedPipe) {
+			fwrite(&audioData, 1, sizeof(audioData), namedPipe);
+			if (audioData.metadatalength) { 
+					fwrite(currentSong, 1, audioData.metadatalength, namedPipe);
+			}
+			fwrite(samples, 1, audioData.samplelength, namedPipe);
+	}
+	if (samples) {
+		free(samples);
 	}
 	return length;
 }
