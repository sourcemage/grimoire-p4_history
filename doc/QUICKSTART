		QUICK START GUIDE FOR SECTION MAINTAINERS
		-----------------------------------------


This guide is intended for section maintainers who want direct access to the 
Perforce repository currently being evaluated for maintaining the SGL Grimoire.
It attempts to give the reader enough information to get started, and links to 
important docs on the Perforce web site.

1. GETTING AN ACCOUNT

Contact the administrator (currently Tony Smith <tony@smee.org>) to get your
Perforce account created.

2. INSTALLATION

You only need to install one file on your machine to use Perforce as a client.
Here it is:

   ftp://ftp.perforce.com/pub/perforce/r01.1/bin.linux24x86/p4

Install it somewhere in your path.

3. ENVIRONMENT

The p4 client needs to know 4 things in order to work. 

	(1) The address of the Perforce Server (P4PORT)
	(2) Your Perforce user name (P4USER)
	(3) Your Perforce password (P4PASSWD)
	(4) The name of your workspace (P4CLIENT)

You can define these in your shell environment, or pass them directly on the 
command line, or you can put them all in a text file at the top of your
workspace, and set P4CONFIG to the name (but not the full path!) of that file.
For now, set them in the shell environment. 

export P4PORT=runt.perforce.co.uk:1700  # *** This will likely change ***
export P4USER=myusername
export P4PASSWD=mypassword

P4CLIENT can be set to any name you like, but a good convention is 
export P4CLIENT=<username>-<hostname>

[ NB. The password is specified in plain text, but is not transmitted in plain 
text across the network. Only a seeded MD5 sum is exchanged between client and 
server. ]

Testing the connection
-----------------------

Run a "p4 info" to test the connection out. You should see something like this:

User name: tony
Client name: myclient
Client host: penfold.perforce.co.uk
Client unknown.
Current directory: /home/tony/p4-sgl
Client address: 195.184.244.186:1183
Server address: runt.perforce.co.uk:1700
Server root: /home/perforce/sgl-root
Server date: 2002/03/22 11:01:24 GMT
Server version: P4D/LINUX52X86/2001.1/24019 (2001/06/24)
Server license: Perforce Software Europe 10 users (expires 2002/10/18) 

Note that your Client [ workspace ] is currently "unknown". That's the next 
step.

4. CREATING YOUR PERFORCE CLIENT

A Perforce client is a specification which maps areas of the repository onto 
directories on your hard disk. Perforce uses it to keep track of the files you 
have and to compute the files you need when you synchronise your workspace.

Pick a name for your client which makes it easy to see who it belongs to. e.g

    <username>-<host name>

and set P4CLIENT to that value:

	export P4CLIENT=tony-penfold

To create your client workspace. Create a new directory to be the top level of 
your workspace and cd into it. Run:

	p4 client -t sgl-template

This opens an editor window allowing you to edit the specification of your 
client ("clientspec"). The ClientRoot marks the top level directory of your 
workspace. The View lists the areas in the repository which are mapped onto 
your client. 

The "-t sgl-template" flag requests that your new client is created using the 
existing client "sgl-template" as a template. Using this will ensure you have 
correct view mappings. Currently these are:

View:
        //sgl/doc/... //sgl-template/doc/...
        //sgl/devel/grimoire/section-name/... //sgl-template/section-name/...

Replace "section-name" on both sides of the second view line with the name of
the section you want to maintain. If you maintain more than one section,
then you can simply duplicate this second line and map as many sections as
you need onto your workspace.

Save the form and edit.

Confirm that your client workspace is defined by running

	p4 clients | grep $P4CLIENT

If you get no rows back, it's not been successfully defined.

5. POPULATING YOUR WORKSPACE

Run:	"p4 sync"


6. MAKING CHANGES

Perforce has atomic changelists. That means you make all the changes you need 
to, to all the files you need to and submit those changes as one atomic 
submission. Either it all works, or none of it does.

The general approach is to "open" files, make changes and then "submit". 
Nothing is visible to other users until you submit.

The opposite of submitting is reverting. You can undo any unsubmitted changes 
by reverting the opened file(s) to the previously submitted revision. e.g.

	p4 edit file.c 		# "open" for edit
	p4 revert file.c 	# abandon changes


So to add/edit/delete files use:

	p4 add foo.c
	p4 edit bar.c
	p4 delete baz.c

but remember, nothing has been added, edited, deleted until you submit. So...

	p4 submit


7. RENAMING FILES/MOVING FILES

There's no difference between renaming files and moving files in Perforce. A 
rename/move is a branch followed by a delete. The command "p4 integrate" is 
used to both create new branches and to propagate changes between existing 
branches. 

	# Rename foo.c to bar.c

	p4 integ foo.c bar.c
	p4 delete foo.c
	p4 submit

Note that the submit wraps up both the branch and the delete in one atomic 
changelist.

	# Move files from one directory to another

	p4 integ multimedia/qt-x11/... kde/qt-x11/...
	p4 delete multimedia/qt-x11/...
	p4 submit

The "..." wildcard allows you to refer to all files and subdirectories below 
the point it's used. 

Using an integrate/delete combination allows the history of the files to be 
related. This does not happen if a delete/add is used instead.

8. A NOTE ON BRANCHING

Perforce branches are very different from CVS branches. In Perforce a branch 
creates a separate (but related) _file_ which has revision #1 as it's head 
revision. So branches are *named* and revisions are *numbered*. This means 
that you do not have revision numbers like 1.2.1.2 as in CVS/RCS etc. In 
Perforce, revision numbers are just integers. For example:

	p4 integ //sgl/devel/... //sgl/stable/...
	p4 submit

Creates a branch of the files under the development tree in the depot path 
//sgl/stable. The files in the new branch are all at revision #1 but have a 
historical link back to the revisions they were branched from in the devel 
path.

Changes can now be propagated backwards and forwards between these branches 
by using commands like these:

	p4 integ //sgl/devel/... //sgl/stable/...  # pull in latest changes
	p4 resolve				   # 3-way merge if required
	p4 submit				   # Commit integration

	p4 integ //sgl/stable/... //sgl/devel/...  # Pull in changes from stable
	p4 resolve				   # 3-way merge if required
	p4 submit

9. REFERENCES

QuickStart Guide: 
http://www.perforce.com/perforce/doc.011/manuals/boilerplates/quickstart.html

Users Guide:

http://www.perforce.com/perforce/doc.011/manuals/p4guide/index.html

Command Reference:

http://www.perforce.com/perforce/doc.011/manuals/cmdref/index.html

Inter-File Branching White Paper. The nuts and bolts of Perforce's approach. 
http://www.perforce.com/perforce/branch.html

SCM Best Practice white paper (if you're interested)

http://www.perforce.com/perforce/bestpractices.html

10. WEB INTERFACE

If you'd rather use a GUI interface, then you can use the p4web client which 
acts as an HTTP server, and a Perforce client. i.e. you run it client-side 
and point your browser at a localhost URL. 

The 2002.1-beta build of P4Web works very well with Mozilla and Galeon so
that's the one to use if you want to try it:

ftp://ftp.perforce.com/pub/perforce/r02.1/bin.linux22x86/p4web

$Id: //sgl/devel/grimoire/doc/QUICKSTART#1 $
