Index: src/Frame.cc
===================================================================
RCS file: /usr/local/cvs/babblica/pekwm/src/Frame.cc,v
retrieving revision 1.57
diff -u -r1.57 Frame.cc
--- src/Frame.cc	2003/12/01 09:03:56	1.57
+++ src/Frame.cc	2003/12/06 21:17:39
@@ -1033,6 +1033,8 @@
 		applyState(client);
 	_client = client;
 
+	_fw->setClientWindow(_client->getWindow());
+
 	updateSize();
 	updatePosition();
 #ifdef HAVE_SHAPE
@@ -1253,9 +1255,9 @@
 void
 Frame::updateSize(void)
 {
-	_fw->resize(_gm.width, _state.shaded ? _real_height : _gm.height);
-
 	updateClientSize(_client);
+
+	_fw->resize(_gm.width, _state.shaded ? _real_height : _gm.height);
 }
 
 //! @fn    void updateSize(uint w, uint h)
@@ -1373,6 +1375,7 @@
 	char buf[64];
 	// makes the window resize before we map
 	updateStatus(buf, 64, c_width, c_height);
+
 	_wm->showStatusWindow();
 	_wm->drawInStatusWindow(buf);
 
Index: src/FrameWidget.cc
===================================================================
RCS file: /usr/local/cvs/babblica/pekwm/src/FrameWidget.cc,v
retrieving revision 1.21
diff -u -r1.21 FrameWidget.cc
--- src/FrameWidget.cc	2003/11/30 18:18:36	1.21
+++ src/FrameWidget.cc	2003/12/06 21:17:39
@@ -134,11 +134,11 @@
 	}
 	WindowObject::resize(width, height);
 
-	if (getTitleHeight()) {
+	if (getTitleHeight() > 0) {
 		if (borderTop()) {
 			XMoveResizeWindow(_dpy, _title_window,
-												borderLeft(), borderTop(),
-												_gm.width - borderLeft() - borderRight(),
+												borderTopLeft(), borderTop(),
+												_gm.width - borderTopLeft() - borderTopRight(),
 												getTitleHeight());
 		} else {
 			XMoveResizeWindow(_dpy, _title_window,
@@ -545,20 +545,40 @@
 void
 FrameWidget::setBorderFocus(void)
 {
-	if (!_border)
+	if (_border == false)
 		return;
 
 	for (uint i = 0; i < BORDER_NO_POS; ++i) {
 		if (_focused) {
 			XSetWindowBackgroundPixmap(_dpy, _border_window[i],
 																 _data->getImBdFo(i)->getPixmap());
+			/*			XShapeCombineMask(_dpy, _border_window[i], ShapeBounding,
+												0, 0,
+												_data->getImBdFo(i)->getMask(), ShapeSet); */
 		} else {
 			XSetWindowBackgroundPixmap(_dpy, _border_window[i],
 																 _data->getImBdUn(i)->getPixmap());
+			/* XShapeCombineMask(_dpy, _border_window[i], ShapeBounding,
+												0, 0,
+												_data->getImBdUn(i)->getMask(), ShapeSet); */
 		}
 
+
 		XClearWindow(_dpy, _border_window[i]);
 	}
+
+	XShapeCombineMask(_dpy, _border_window[BORDER_TOP_LEFT], ShapeBounding,
+										0, 0,
+										_data->getImBdFo(BORDER_TOP_LEFT)->getMask(), ShapeSet);
+	XShapeCombineMask(_dpy, _border_window[BORDER_TOP_RIGHT], ShapeBounding,
+										0, 0,
+										_data->getImBdFo(BORDER_TOP_RIGHT)->getMask(), ShapeSet);
+	XShapeCombineMask(_dpy, _border_window[BORDER_BOTTOM_LEFT], ShapeBounding,
+										0, 0,
+										_data->getImBdFo(BORDER_BOTTOM_LEFT)->getMask(), ShapeSet);
+	XShapeCombineMask(_dpy, _border_window[BORDER_BOTTOM_RIGHT], ShapeBounding,
+										0, 0,
+										_data->getImBdFo(BORDER_BOTTOM_RIGHT)->getMask(), ShapeSet);
 }
 
 //! @fn    void hideButtons(void)
@@ -592,63 +612,136 @@
 
 		XMoveResizeWindow(_dpy, _border_window[BORDER_TOP_LEFT],
 											0, 0,
-											borderTopLeft(), borderTop());
+											borderTopLeft(), borderTopLeftHeight());
 		XMoveResizeWindow(_dpy, _border_window[BORDER_TOP_RIGHT],
 											_gm.width - borderTopRight(), 0,
-											borderTopRight(), borderTop());
+											borderTopRight(), borderTopRightHeight());
 
-		if (borderLeft()) {
+		if (borderLeft() > 0) {
 			XMoveResizeWindow(_dpy, _border_window[BORDER_LEFT],
-												0, borderTop(),
+												0, borderTopLeftHeight(),
 												borderLeft(),
-												_gm.height - borderTop() - borderBottom());
+												_gm.height - borderTopLeftHeight() - borderBottomLeftHeight());
 		}
 
 		if (borderRight()) {
 			XMoveResizeWindow(_dpy, _border_window[BORDER_RIGHT],
-												_gm.width - borderRight(), borderTop(),
+												_gm.width - borderRight(), borderTopRightHeight(),
 												borderRight(),
-												_gm.height - borderTop() - borderBottom());
+												_gm.height - borderTopRightHeight() - borderBottomRightHeight());
 		}
 	} else {
 		if (borderLeft()) {
 			XMoveResizeWindow(_dpy, _border_window[BORDER_LEFT],
 												0, getTitleHeight(),
 												borderLeft(),
-												_gm.height - getTitleHeight() - borderBottom());
+												_gm.height - getTitleHeight() - borderBottomLeftHeight());
 		}
 
 		if (borderRight()) {
 			XMoveResizeWindow(_dpy, _border_window[BORDER_RIGHT],
 												_gm.width - borderRight(), getTitleHeight(),
 												borderRight(),
-												_gm.height - getTitleHeight() - borderBottom());
+												_gm.height - getTitleHeight() - borderBottomRightHeight());
 		}
 	}
 
-	if (borderBottom()) {
-		if (_shaded) {
-			XMoveResizeWindow(_dpy, _border_window[BORDER_BOTTOM],
-												borderBottomLeft(), getTitleHeight() + borderTop(),
-												_gm.width - borderBottomLeft() - borderBottomRight(), borderBottom());
-			XMoveResizeWindow(_dpy, _border_window[BORDER_BOTTOM_LEFT],
-												0, getTitleHeight() + borderTop(),
-												borderBottomLeft(), borderBottom());
-			XMoveResizeWindow(_dpy, _border_window[BORDER_BOTTOM_RIGHT],
-												_gm.width - borderBottomRight(), getTitleHeight() + borderTop(),
-												borderBottomRight(), borderBottom());
-		} else {
-			XMoveResizeWindow(_dpy, _border_window[BORDER_BOTTOM],
-												borderBottomLeft(), _gm.height - borderBottom(),
-												_gm.width - borderBottomLeft() - borderBottomRight(), borderBottom());
-			XMoveResizeWindow(_dpy, _border_window[BORDER_BOTTOM_LEFT],
-												0, _gm.height - borderBottom(),
-												borderBottomLeft(), borderBottom());
-			XMoveResizeWindow(_dpy, _border_window[BORDER_BOTTOM_RIGHT],
-												_gm.width - borderBottomRight(), _gm.height - borderBottom(),
-												borderBottomRight(), borderBottom());
+	if (borderBottom() > 0) {
+		XMoveResizeWindow(_dpy, _border_window[BORDER_BOTTOM],
+											borderBottomLeft(), _gm.height - borderBottom(),
+											_gm.width - borderBottomLeft() - borderBottomRight(), borderBottom());
+
+		XMoveResizeWindow(_dpy, _border_window[BORDER_BOTTOM_LEFT],
+											0, _gm.height - borderBottomLeftHeight(),
+											borderBottomLeft(), borderBottomLeftHeight());
+
+		XMoveResizeWindow(_dpy, _border_window[BORDER_BOTTOM_RIGHT],
+											_gm.width - borderBottomRight(), _gm.height - borderBottomRightHeight(),
+											borderBottomRight(), borderBottomRightHeight());
+	}
+
+	// create shape mask for window
+	Window shape;
+	shape =
+		XCreateSimpleWindow(_dpy, _scr->getRoot(), 0, 0, _gm.width, _gm.height,
+												0, 0, 0);
+
+	XShapeCombineShape(_dpy, shape, ShapeBounding,
+										 borderLeft(), borderTop() + getTitleHeight(),
+										 _client_window,
+										 ShapeBounding, ShapeSet);
+
+	// apply title shape
+	if (_title) {
+		XShapeCombineShape(_dpy, shape, ShapeBounding,
+											 (borderTop() > 0) ? borderTopLeft() : 0, borderTop(),
+											 _title_window,
+											 ShapeBounding, ShapeUnion);
+	}
+
+	if (_border) {
+		// top
+		if (borderTop() > 0) {
+			XShapeCombineShape(_dpy, shape, ShapeBounding,
+												 0, 0,
+												 _border_window[BORDER_TOP_LEFT],
+												 ShapeBounding, ShapeUnion);
+
+			XShapeCombineShape(_dpy, shape, ShapeBounding,
+												 borderTopLeft(), 0,
+												 _border_window[BORDER_TOP],
+												 ShapeBounding, ShapeUnion);
+
+			XShapeCombineShape(_dpy, shape, ShapeBounding,
+												 _gm.width - borderTopRight(), 0,
+												 _border_window[BORDER_TOP_RIGHT],
+												 ShapeBounding, ShapeUnion);
+		}
+
+		// left
+		if (borderLeft() > 0) {
+			XShapeCombineShape(_dpy, shape, ShapeBounding,
+												 0,
+												 (borderTop() > 0) ? borderTopLeftHeight() : getTitleHeight(),
+												 _border_window[BORDER_LEFT],
+												 ShapeBounding, ShapeUnion);
+		}
+
+		// right
+		if (borderRight() > 0) {
+			XShapeCombineShape(_dpy, shape, ShapeBounding,
+												 _gm.width - borderRight(),
+												 (borderTop() > 0) ? borderTopRightHeight() : getTitleHeight(),
+												 _border_window[BORDER_RIGHT],
+												 ShapeBounding, ShapeUnion);
+		}
+
+		// bottom
+		if (borderBottom() > 0) {
+			XShapeCombineShape(_dpy, shape, ShapeBounding,
+												 0, _gm.height - borderBottomLeftHeight(),
+												 _border_window[BORDER_BOTTOM_LEFT],
+												 ShapeBounding, ShapeUnion);
+
+			XShapeCombineShape(_dpy, shape, ShapeBounding,
+												 borderBottomLeft(), _gm.height - borderBottom(),
+												 _border_window[BORDER_BOTTOM],
+												 ShapeBounding, ShapeUnion);
+
+			XShapeCombineShape(_dpy, shape, ShapeBounding,
+												 _gm.width - borderBottomRight(), _gm.height - borderBottomRightHeight(),
+												 _border_window[BORDER_BOTTOM_RIGHT],
+												 ShapeBounding, ShapeUnion);
 		}
 	}
+
+	// apply the shape mask to the window
+	if (_title) {
+		XShapeCombineShape(_dpy, _window, ShapeBounding, 0, 0, shape,
+											 ShapeBounding, ShapeSet);
+	}
+
+	XDestroyWindow(_dpy, shape);
 }
 
 //! @fn    void loadButtons(void)
@@ -694,8 +787,9 @@
 FrameWidget::placeButtons(void)
 {
 	int left = 0, right = _gm.width;
-	if (borderTop())
-		right -= borderLeft() + borderRight();
+	if (borderTop()) {
+		right -= borderTopLeft() + borderTopRight();
+	}
 
 	list<Button*>::iterator it = _button_list.begin();
 	for (; it != _button_list.end(); ++it) {
Index: src/FrameWidget.hh
===================================================================
RCS file: /usr/local/cvs/babblica/pekwm/src/FrameWidget.hh,v
retrieving revision 1.11
diff -u -r1.11 FrameWidget.hh
--- src/FrameWidget.hh	2003/11/30 18:18:36	1.11
+++ src/FrameWidget.hh	2003/12/06 21:17:39
@@ -41,6 +41,9 @@
 	inline uint getButtonWidthR(void) const { return _button_wr; }
 
 	// windows
+	inline Window getClientWindow(void) const { return _client_window; }
+	inline void setClientWindow(Window window) { _client_window = window; }
+
 	inline Window getTitleWindow(void) const { return _title_window; }
 
 	// states
@@ -95,12 +98,24 @@
 					 : _data->getImBdUn(BORDER_TOP_LEFT)->getWidth()) : 0);
 	}
 	inline uint
+	FrameWidget::borderTopLeftHeight(void) const {
+		return (_border ? (_focused
+					 ? _data->getImBdFo(BORDER_TOP_LEFT)->getHeight()
+					 : _data->getImBdUn(BORDER_TOP_LEFT)->getHeight()) : 0);
+	}
+	inline uint
 	FrameWidget::borderTopRight(void) const {
 		return (_border ? (_focused
 					 ? _data->getImBdFo(BORDER_TOP_RIGHT)->getWidth()
 					 : _data->getImBdUn(BORDER_TOP_RIGHT)->getWidth()) : 0);
 	}
 	inline uint
+	FrameWidget::borderTopRightHeight(void) const {
+		return (_border ? (_focused
+					 ? _data->getImBdFo(BORDER_TOP_RIGHT)->getHeight()
+					 : _data->getImBdUn(BORDER_TOP_RIGHT)->getHeight()) : 0);
+	}
+	inline uint
 	FrameWidget::borderBottom(void) const {
 		return (_border ? (_focused
 					 ? _data->getImBdFo(BORDER_BOTTOM)->getHeight()
@@ -113,12 +128,24 @@
 					 : _data->getImBdUn(BORDER_BOTTOM_LEFT)->getWidth()) : 0);
 	}
 	inline uint
+	FrameWidget::borderBottomLeftHeight(void) const {
+		return (_border ? (_focused
+					 ? _data->getImBdFo(BORDER_BOTTOM_LEFT)->getHeight()
+					 : _data->getImBdUn(BORDER_BOTTOM_LEFT)->getHeight()) : 0);
+	}
+	inline uint
 	FrameWidget::borderBottomRight(void) const {
 		return (_border ? (_focused
 					 ? _data->getImBdFo(BORDER_BOTTOM_RIGHT)->getWidth()
 					 : _data->getImBdUn(BORDER_BOTTOM_RIGHT)->getWidth()) : 0);
 	}
 	inline uint
+	FrameWidget::borderBottomRightHeight(void) const {
+		return (_border ? (_focused
+					 ? _data->getImBdFo(BORDER_BOTTOM_RIGHT)->getHeight()
+					 : _data->getImBdUn(BORDER_BOTTOM_RIGHT)->getHeight()) : 0);
+	}
+	inline uint
 	FrameWidget::borderLeft(void) const {
 		return (_border ? (_focused
 					 ? _data->getImBdFo(BORDER_LEFT)->getWidth()
@@ -146,6 +173,8 @@
 private:
 	PScreen *_scr;
 	Theme *_theme;
+
+	Window _client_window; // used when shaping the frame
 
 	std::string _data_name, _data_name_orig;
 	Theme::FrameData *_data;
