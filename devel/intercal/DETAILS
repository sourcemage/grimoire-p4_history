           SPELL=intercal
         VERSION=0.22
          SOURCE=$SPELL-$VERSION.tar.gz
SOURCE_DIRECTORY=$BUILD_DIRECTORY/$SPELL-$VERSION
   SOURCE_URL[0]=http://catb.org/~esr/intercal/$SOURCE
     SOURCE_HASH=sha512:9e78c3a261cacd7013cc2dc72810df8c36c129a5b1bd2597689a069c91e1a1ffdce941a3083ff3847802c183751d19d463a9c391eb38390e8e29b93ecf7ef922
        WEB_SITE=http://catb.org/~esr/intercal/
         ENTERED=20020508
         UPDATED=20030906
      LICENSE[0]=GPL
       BUILD_API=2
        KEYWORDS="devel"
           SHORT="Now you, too, can be a part of the madness"
cat << EOF
So, you think you've seen it all, eh?

OK. You've coded in C. You've hacked in LISP. Fortran and BASIC hold no
terrors for you. You write Emacs modes for fun. You eat assemblers for
breakfast. You're fluent in half a dozen languages nobody but a handful
of übergeeks have ever heard of. You grok TECO. Possibly you even know
<shudder> COBOL.

Maybe you're ready for the ultimate challenge...INTERCAL.

INTERCAL. The language designed to be Turing-complete but as fundamentally
unlike any existing language as possible. Expressions that look like line
noise. Control constructs that will make you gasp, make you laugh, and
possibly make you hurl. Data structures? We don't need no steenking data
structures!

INTERCAL. Designed very early one May morning in 1972 by two hackers who
are still trying to live it down. Initially implemented on an IBM 360
running batch SPITBOL. Described by a manual that circulated for years
after the short life of the first implementation, reducing strong men to
tears (of laughter). Revived in 1990 by the C-INTERCAL compiler, and now
the center of an international community of technomasochists.

INTERCAL. Now you, too, can be a part of the madness. 
EOF
