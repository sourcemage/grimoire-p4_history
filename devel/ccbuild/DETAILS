           SPELL=ccbuild
         VERSION=1.5.1
     SOURCE_HASH=sha512:cf55277153598180e94f52b101978afdc1b8e1b737f297f616216a12bbc55ca6cba7eb847963e0fd111a46e0852195119cba526c083e552b7315394daefeebd9
          SOURCE="$SPELL-$VERSION.tar.gz"
   SOURCE_URL[0]=$SOURCEFORGE_URL/$SPELL/$SOURCE
SOURCE_DIRECTORY="$BUILD_DIRECTORY/$SPELL-$VERSION"
        WEB_SITE=http://ccbuild.sourceforge.net/
   FRESHMEAT_URL="http://freshmeat.net/projects/$SPELL/"
      LICENSE[0]='GPL'
         UPDATED=20050725
       BUILD_API=2
           DOCS="doc/debiandoc/ccbuild.html/* tools/ccResolutions.d"
           SHORT="A strict developer's build utility"
cat << EOF
ccbuild is like a dynamic Makefile. ccbuild finds all programs in the current directory (containing &quot;int main&quot;) and compiles them. For this, it reads the C++ sources and looks at all local and global includes. All C++ files surrounding local includes are considered objects for the main program. The global includes lead to extra compiler arguments using a configuration file. ccbuild splits these arguments for compilation and linking, keeping the linking arguments back for later use. It should allow development without any scripting and only simple reusable configuration. Real deployment/distribution should still be done with other tools. As an added bonus, it can create simple Makefiles and graph dependencies using DOT (graphviz) graphs.
EOF
## Auto-generated from Freshmeat.net's project descriptor
