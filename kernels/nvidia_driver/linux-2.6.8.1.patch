diff -Nru nvidia_driver/BUILD ../../test/kernels/nvidia_driver/BUILD
--- nvidia_driver/BUILD	2004-10-07 13:45:05.412170440 +0200
+++ ../../test/kernels/nvidia_driver/BUILD	2004-07-25 19:10:07.000000000 +0200
@@ -1,8 +1,3 @@
-(
-    cd usr/src/nv                                                      && 
-    patch  -p1  <  ${SCRIPT_DIRECTORY}/nv_enable_pci.patch             &&
-    patch  -p0  <  ${SCRIPT_DIRECTORY}/nv_pm_save_state.patch
-)                                                                      &&
 patch  -p1  <  ${SCRIPT_DIRECTORY}/NVIDIA_glx-1.0.6106-defines.patch   &&
 patch  -p0  <  ${SCRIPT_DIRECTORY}/NVIDIA_glx-1.0.6106-glheader.patch  &&
 
diff -Nru nvidia_driver/HISTORY ../../test/kernels/nvidia_driver/HISTORY
--- nvidia_driver/HISTORY	2004-10-07 13:45:05.413170288 +0200
+++ ../../test/kernels/nvidia_driver/HISTORY	2004-08-20 00:10:09.000000000 +0200
@@ -1,8 +1,3 @@
-2004-10-07 Lyon Lemmens <redlemon@knoware.nl>
-	* BUILD: added patches for kernel 2.6.8.1
-	* nv_pm_save_state.patch: new patch makes sure driver compiles
-	* nv_enable_pci.patch: new patch file makes sure driver works
-
 2004-08-17 Wolfgang Scheicher <worf@sbox.tu-graz.ac.at>
 	* PRE_BUILD: Extract SOURCE to a subdir, so it works with tmpfs
 
diff -Nru nvidia_driver/nv_enable_pci.patch ../../test/kernels/nvidia_driver/nv_enable_pci.patch
--- nvidia_driver/nv_enable_pci.patch	2004-10-07 13:45:05.413170288 +0200
+++ ../../test/kernels/nvidia_driver/nv_enable_pci.patch	1970-01-01 01:00:00.000000000 +0100
@@ -1,120 +0,0 @@
---- nv/nv.c	2004-08-23 13:58:15.000000000 -0500
-+++ nv.new/nv.c	2004-08-23 13:58:35.000000000 -0500
-@@ -1225,6 +1225,7 @@
-         {
-             nv_state_t *nv = NV_STATE_PTR(&nv_linux_devices[i]);
-             release_mem_region(nv->bar.regs.address, nv->bar.regs.size);
-+            pci_disable_device(nv_linux_devices[i].dev);
-         }
-     }
- 
-@@ -3516,6 +3517,28 @@
-         return -1;
-     }
- 
-+    // enable io, mem, and bus-mastering in pci config space
-+    if (pci_enable_device(dev) != 0)
-+    {
-+        nv_printf(NV_DBG_ERRORS,
-+            "NVRM: pci_enable_device failed, aborting\n");
-+        return -1;
-+    }
-+
-+    // request ownership of our bars
-+    // keeps other drivers from banging our registers.
-+    // only do this for registers, as vesafb requests our framebuffer and will
-+    // keep us from working properly
-+    if (!request_mem_region(dev->resource[0].start,
-+                            dev->resource[0].end - dev->resource[0].start + 1,
-+                            "nvidia"))
-+    {
-+        nv_printf(NV_DBG_ERRORS,
-+            "NVRM: pci_request_regions failed, aborting\n");
-+        goto err_disable_dev;
-+    }
-+    pci_set_master(dev);
-+
-     /* initialize bus-dependent config state */
-     nvl = &nv_linux_devices[num_nv_devices];
-     nv  = NV_STATE_PTR(nvl);
-@@ -3545,7 +3568,7 @@
-         nv_printf(NV_DBG_ERRORS, "NVRM: Please check your BIOS settings.         \n");
-         nv_printf(NV_DBG_ERRORS, "NVRM: [Plug & Play OS   ] should be set to NO  \n");
-         nv_printf(NV_DBG_ERRORS, "NVRM: [Assign IRQ to VGA] should be set to YES \n");
--        return -1;
-+        goto err_zero_dev;
-     }
- 
-     /* sanity check the IO apertures */
-@@ -3569,39 +3592,9 @@
-                 nv->bar.fb.address, nv->bar.fb.size);
-         }
- 
--        /* Clear out the data */
--        os_mem_set(nvl, 0, sizeof(nv_linux_state_t));
--
--        return -1;
--    }
--
--    // request ownership of our bars
--    // keeps other drivers from banging our registers.
--    // only do this for registers, as vesafb requests our framebuffer and will
--    // keep us from working properly
--    if (!request_mem_region(nv->bar.regs.address, nv->bar.regs.size, "nvidia"))
--    {
--        nv_printf(NV_DBG_ERRORS,
--            "NVRM: pci_request_regions failed, aborting\n");
--
--        /* Clear out the data */
--        os_mem_set(nvl, 0, sizeof(nv_linux_state_t));
--
--        return -1;
-+        goto err_zero_dev;
-     }
- 
--    // enable io, mem, and bus-mastering in pci config space
--    if (pci_enable_device(dev) != 0)
--    {
--        nv_printf(NV_DBG_ERRORS,
--            "NVRM: pci_enable_device failed, aborting\n");
--
--        pci_release_regions(dev);
--        os_mem_set(nvl, 0, sizeof(nv_linux_state_t));
--
--        return -1;
--    }
--    pci_set_master(nvl->dev);
- 
- #if defined(NV_BUILD_NV_PAT_SUPPORT)
-     if (nvos_find_pci_express_capability(nvl->dev))
-@@ -3618,13 +3611,7 @@
-     if (nv->bar.regs.map == NULL)
-     {
-         nv_printf(NV_DBG_ERRORS, "NVRM: failed to map registers!!\n");
--
--        pci_release_regions(dev);
--
--        /* Clear out the data */
--        os_mem_set(nvl, 0, sizeof(nv_linux_state_t));
--
--        return -1;
-+        goto err_zero_dev;
-     }
-     nv->flags |= NV_FLAG_MAP_REGS_EARLY;
- #endif
-@@ -3641,6 +3628,15 @@
-     num_nv_devices++;
- 
-     return 0;
-+
-+err_zero_dev:
-+    os_mem_set(nvl, 0, sizeof(nv_linux_state_t));
-+    release_mem_region(dev->resource[0].start,
-+                       dev->resource[0].end - dev->resource[0].start + 1);
-+
-+err_disable_dev:
-+    pci_disable_device(dev);
-+    return -1;
- }
- 
- int NV_API_CALL nv_no_incoherent_mappings
diff -Nru nvidia_driver/nv_pm_save_state.patch ../../test/kernels/nvidia_driver/nv_pm_save_state.patch
--- nvidia_driver/nv_pm_save_state.patch	2004-10-07 13:45:05.413170288 +0200
+++ ../../test/kernels/nvidia_driver/nv_pm_save_state.patch	1970-01-01 01:00:00.000000000 +0100
@@ -1,11 +0,0 @@
---- nv.c	2004-10-07 13:08:32.975280080 +0200
-+++ nv.c.new	2004-10-07 13:13:00.963452639 +0200
-@@ -3690,7 +3690,7 @@
- 
-     switch (state)
-     {
--        case PM_SAVE_STATE:
-+        case PM_SUSPEND_MEM:
-             nv_printf(NV_DBG_INFO, "NVRM: ACPI: received standby event\n");
-             status = rm_power_management(nv, 0, NV_PM_ACPI_STANDBY);
-             break;
