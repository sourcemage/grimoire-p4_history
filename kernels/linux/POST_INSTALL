cut_label()  {

  if    ((  $(  echo  $1  |  wc  -c  )  >  15  ));  then
    echo  "$1"            |
    sed   "s/linux-//"    |
    cut   -c1-15
  else
    echo  "$1"
  fi

}


lilo_image_entry()  {

  cat  <<  EOF

image			=	/boot/vmlinubz-$VERSION
	label		=	$(  cut_label linux-$VERSION  )
	read-only
	restricted

EOF

}


update_lilo()  {

  if  !  grep  -q  "${VERSION}$"  /etc/lilo.conf;  then

    IFS_OLD=$IFS
    export  IFS="
"

    rm  -rf  /etc/lilo.conf.new
    cp  /etc/lilo.conf  /etc/lilo.conf.old

    (( IMAGE_COUNT=0  ))

    for  LINE  in  `cat /etc/lilo.conf`;  do

      if   echo  $LINE  |  grep  -q  "image"  ||
           echo  $LINE  |  grep  -q  "other"  ;  then
        if  (( IMAGE_COUNT  == 0  ));  then
          echo  -e  "`lilo_image_entry`"  >>  /etc/lilo.conf.new
        fi
        ((  IMAGE_COUNT++  ))
      fi

      if  ((  IMAGE_COUNT == 14  ));  then
        break
      fi
    
      echo  $LINE  >>  /etc/lilo.conf.new

    done

    if  ((  IMAGE_COUNT ==  0  ));  then
      echo  -e  "`lilo_image_entry`"  >>  /etc/lilo.conf.new
    fi

    cp  /etc/lilo.conf.new  /etc/lilo.conf

    export  IFS=$IFS_OLD

  fi

  /sbin/lilo

}


update_yaboot()  {

  if  !  grep  -q  "$VERSION"  /etc/yaboot.conf;  then

    IFS_OLD=$IFS
    export  IFS="
"

    rm  -rf  /etc/yaboot.conf.new
    cp  /etc/yaboot.conf  /etc/yaboot.conf.old

    (( IMAGE_COUNT=0  ))

    for  LINE  in  `cat /etc/yaboot.conf`;  do

      if   echo  $LINE  |  grep  -q  "image"  ||
           echo  $LINE  |  grep  -q  "other"  ;  then
        if  (( IMAGE_COUNT  == 0  ));  then
          echo  -e  "`lilo_image_entry`"  >>  /etc/yaboot.conf.new
        fi
        ((  IMAGE_COUNT++  ))
      fi

      if  ((  IMAGE_COUNT == 14  ));  then
        break
      fi

      echo  $LINE  >>  /etc/yaboot.conf.new

    done

    if  ((  IMAGE_COUNT ==  0  ));  then
      echo  -e  "`lilo_image_entry`"  >>  /etc/yaboot.conf.new
    fi

    cp  /etc/yaboot.conf.new  /etc/yaboot.conf

    export  IFS=$IFS_OLD

  fi

  /usr/sbin/ybin

}


$SCRIPT_DIRECTORY/UPDATE_BOOTLOADER

#  Reinstall packages that add their own kernel modules
#  but only if modules are supported
if  grep  -q  "CONFIG_MODULES=y"  $CONFIG_CACHE/kernel.config;
then
  rm  -f  $BOOST_LOCK

  KERNEL_MODULES=`cat  $SCRIPT_DIRECTORY/MODULES`

  for  KERNEL_MODULE  in  $KERNEL_MODULES;  do
    if  spell_installed  $KERNEL_MODULE;  then
      cast  $KERNEL_MODULE;
    fi
  done
fi
