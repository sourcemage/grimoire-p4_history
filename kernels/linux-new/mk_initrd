#!/bin/sh
# $1 is the kernel version
# this is a really simple way to create an initrd
# if you want to have filesystem modules instead of
# compiling them directly into the kernel
# this doesn't deal with RAID LVM IDE/SCSI modules
# just file system modules
# modify the count variable to create the proper size
# (in KB) of the initrd



#modules="`ls -1 /lib/modules/$1/kernel/fs/*/*.ko`"
#for module in $modules
#do
#	menu="${menu}${module} module Help "
#done
#while true
#do
#	command=$(dialog --stdout --cancel-label "Save and Exit" \
#	--title "Select File System Modules" \
#	--item-help --menu \
#	"File System Modules Available\nFile System Modules Selected: $selected" 0 0 0 $menu )
#	retval="$?"
#	tmp_selected=""
#	found="false"
#	if [[ $retval == "0" ]]
#	then
#		for module in $selected
#		do
#			if [ "$command" != "$module" ]
#			then
#				tmp_selected="${tmp_selected}${module} "
#			else
#				found="true"
#			fi
#			
#		done
#		if [ "$found" == "true" ]
#		then
#			selected=$tmp_selected
#		else
#			selected="${selected}${command} "
#		fi
#	else
#		break
#	fi
#done

#modules=""
#for module in $selected
#do
#	modules="${modules}`basename $module` "
#done

rm /boot/initrd-$1

[ -d /mnt/initrd ] || mkdir -p /mnt/initrd
rm -rf /mnt/initrd/*

# make basic dir structure
cd /mnt/initrd
mkdir bin dev etc lib proc sbin var sys usr mnt initrd
cd var
mkdir lock log
cd ../lib
mkdir -p modules/
cd ../usr
mkdir bin

# copy config files
cd /etc
cp -a udev fstab group passwd /mnt/initrd/etc/

# copy executables
cd /sbin
cp -a insmod modprobe udev* pivot_root /mnt/initrd/sbin/
cd /bin
cp -a bash sh ls echo mount ln mkdir mknod chown chmod umount /mnt/initrd/bin/
cd /usr/bin
cp -a grep /mnt/initrd/usr/bin

# copy libs
cd /lib
cp -a ld-* /mnt/initrd/lib
cp -a libc[-.]* /mnt/initrd/lib
cp -a libreadline.* /mnt/initrd/lib
cp -a libhistory.* /mnt/initrd/lib
cp -a libncurses.* /mnt/initrd/lib
cp -a libdl* /mnt/initrd/lib
cp -a libpthread* /mnt/initrd/lib
cp -a librt* /mnt/initrd/lib
cp -a libblkid* /mnt/initrd/lib
cp -a libuuid* /mnt/initrd/lib
# don't need these files
rm /mnt/initrd/lib/*.a

# cp relevent modules
#for module in $selected
#do
	cp -a /lib/modules/$1 /mnt/initrd/lib/modules/
#done

# cp console null hd's
cp -a /dev/console /mnt/initrd/dev/
cp -a /dev/null /mnt/initrd/dev/

# create linuxrc
(
cat << EOF
#!/bin/bash

PATH=/bin:/sbin:/usr/bin
export PATH

modprobe ide-core
modprobe ide-generic
modprobe ide-cd
modprobe ide-disk
modprobe generic
modprobe via82cxxx
modprobe xfs


. /etc/udev/udev.conf
# mount sysfs
echo "Mounting sysfs at /sys"
mount -nt sysfs none /sys
# mount proc
echo "Mounting /proc"
mount -nt proc none /proc
echo "Mounting ramfs at \$udev_root"
mount -nt ramfs none \$udev_root
# create some needed stuff
ln -s /proc/self/fd \$udev_root/fd
ln -s /dev/fd/0 \$udev_root/stdin
ln -s /dev/fd/1 \$udev_root/stdout
ln -s /dev/fd/2 \$udev_root/stderr
mkdir \$udev_root/shm
mkdir \$udev_root/pts
# propogate /udev from /sys - we only need this while we do not
# have initramfs and an early user-space with which to do early
# device bring up
echo "Creating initial udev device nodes"
/sbin/udevstart
if [ -f /etc/udev/udev.missing ]; then
echo "Processing /etc/udev/udev.missing"
cd /dev
while read line; do
	if [ "\${line:0:1}" == "#" ]; then continue; fi
	for ((i=0; i<7; i++)); do
		val[\$i]=\${line%%:*}
		line=\${line#*:}
	done
	if [ "\${val[1]}" == "d" ]; then
		mkdir \${val[0]}
	else
		mknod \${val[0]} \${val[1]} \${val[2]} \${val[3]}
	fi
	#chmod \${val[4]} \${val[0]}
	#chown \${val[5]}:\${val[6]} \${val[0]}
done < /etc/udev/udev.missing
cd /
fi
echo "Telling init to reopen file descriptors"
kill -USR1 1
echo "Starting udevd"
/sbin/udevd &
echo "0x100" > /proc/sys/kernel/real_root_dev
mount -n /dev/hda4 /mnt
umount -n /proc
umount -n /sys
umount -n /dev
pivot_root /mnt initrd

EOF
) > /mnt/initrd/linuxrc

chmod 755 /mnt/initrd/linuxrc

mkfs.cramfs -b 4096 /mnt/initrd /boot/initrd-$1
rm -rf /mnt/initrd/*
