#!/bin/sh
# $1 is the kernel version
# this is a really simple way to create an initrd
# if you want to have modules instead of compiling
# support directly into the kernel
# this doesn't deal with RAID LVM 
# This uses cramfs to make the initrd so you need
# those plus busybox, even though I haven't gotten
# it to work well

rm /boot/initrd-$1

[ -d /mnt/initrd ] || mkdir -p /mnt/initrd
rm -rf /mnt/initrd/*

# make basic dir structure
cd /mnt/initrd
mkdir bin dev etc etc.ro lib proc sbin var sys usr mnt initrd
cd var
mkdir lock log
cd ../lib
mkdir -p modules/
cd ../usr
mkdir bin

# copy config files
cd /etc
cp -a init.d udev fstab group passwd /mnt/initrd/etc.ro/
cp -a init.d udev fstab group passwd /mnt/initrd/etc/

cd /mnt/initrd/etc/init.d
ln -s ../../linuxrc rcS

# copy busybox
cd /sbin
cp -a busybox /mnt/initrd/sbin/

# link everything
cd /mnt/initrd/sbin/
for i in insmod modprobe pivot_root reboot halt init mesg lsmod rmmod swapon \
         swapoff makedevs
do
	ln -s busybox $i
done

cd ../bin
for i in ash sh ls echo mount ln mkdir mknod chown chmod umount tar basename \
         chgrp cat chroot cp cut dd df dirname du env expr false head id \
	 install md5sum mv printf pwd realpath rm rmdir sleep sort sync tail \
	 tee touch tr true uname uniq who whoami yes which readlink sed dmesg \
	 more awk
do
	ln -s ../sbin/busybox $i
done
cd ../usr/bin
for i in grep bunzip2 gzip gunzip unzip patch find xargs
do
	ln -s ../../sbin/busybox $i
done

# copy libs
# don't need this with busybox :DDD
#cd /lib
#cp -a ld-* /mnt/initrd/lib
#cp -a libc[-.]* /mnt/initrd/lib
#cp -a libreadline.* /mnt/initrd/lib
#cp -a libhistory.* /mnt/initrd/lib
#cp -a libncurses.* /mnt/initrd/lib
#cp -a libdl* /mnt/initrd/lib
#cp -a libpthread* /mnt/initrd/lib
#cp -a librt* /mnt/initrd/lib
#cp -a libblkid* /mnt/initrd/lib
#cp -a libuuid* /mnt/initrd/lib
# don't need these files
#rm /mnt/initrd/lib/*.a

# cp relevent modules
#for module in $selected
#do
cp -a /lib/modules/$1 /mnt/initrd/lib/modules/
#done

# cp console null hd's
cp -a /dev/console /mnt/initrd/dev/
cp -a /dev/null /mnt/initrd/dev/

# create linuxrc
(
cat << EOF
#!/bin/ash

export PATH="/bin:/usr/bin:/sbin:/usr/sbin"

udev_root=/dev
# mount sysfs
/bin/echo "Mounting sysfs at /sys"
/bin/mount -nt sysfs none /sys
# mount proc
/bin/echo "Mounting /proc"
/bin/mount -nt proc none /proc
/bin/echo "Mounting tmpfs at /etc/"
/bin/mount -nt tmpfs none /etc
/bin/echo "Copying etc.ro to etc"
/bin/cp -a /etc.ro/* /etc
/bin/touch /etc/mtab
/bin/echo "Mounting ramfs at \$udev_root"
/bin/mount -nt ramfs none \$udev_root
# create some needed stuff
/bin/ln -s /proc/self/fd \$udev_root/fd
/bin/ln -s /dev/fd/0 \$udev_root/stdin
/bin/ln -s /dev/fd/1 \$udev_root/stdout
/bin/ln -s /dev/fd/2 \$udev_root/stderr
/bin/mkdir \$udev_root/shm
/bin/mkdir \$udev_root/pts
# propogate /udev from /sys - we only need this while we do not
# have initramfs and an early user-space with which to do early
# device bring up
/bin/echo "Getting real root dev"
real_root="\`/bin/cat /proc/cmdline | /bin/awk '{ for ( i = 1; i <= NF; i++ )  
						if ( \$i ~ /real_root=.*/ )
							print \$i
					}' | /bin/awk -F= '{ print \$2 }'\`"
/bin/echo "Real Root is \${real_root}"
/bin/echo "Creating initial udev device nodes"
last="\`/bin/echo \$real_root | /bin/sed 's/\/dev\/hd[a-z]//g'\`"
real_dev="\`/bin/echo \$real_root | /bin/sed 's/[0-9]//g'\`"
/sbin/makedevs  \$real_dev b 3 0 0 \$last
/bin/echo "0x100" > /proc/sys/kernel/real-root-dev
/bin/mount -n \${real_root} /mnt
/bin/umount -n /proc
/bin/umount -n /sys
/bin/umount -n /dev
/bin/umount -n /etc
cd /mnt
/sbin/pivot_root . initrd
/bin/echo "args to init \$@"
exec /bin/chroot . /sbin/init < /dev/console > /dev/console 2>&1

EOF
) > /mnt/initrd/linuxrc

chmod 755 /mnt/initrd/linuxrc

mkfs.cramfs -b 4096 /mnt/initrd /boot/initrd-$1
