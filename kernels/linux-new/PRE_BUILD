
if [[ "$mode" == "newktree" ]]
then
	mk_source_dir $SOURCE_DIRECTORY 

	cd ${SOURCE_DIRECTORY}
	unpack $SOURCE ${MD5[0]}
	cd linux-${KERNEL_VERSION}
	
	. ${SCRIPT_DIRECTORY}/functions
	. ${SCRIPT_DIRECTORY}/latest.defaults
	for patch in $patches
	do
		case "$patch" in
			LATEST*)
				patch=${!patch}
				;;
			*)
				;;
		esac
		pval=1
		. ${SCRIPT_DIRECTORY}/info/patches/*/${patch}
		cp ${INSTALL_ROOT}/${SOURCE_CACHE}/${source} ./
		linux_new_uncompress ./${source}
		echo "Patching ${patch}"
		sleep 3
		patch -p${pval} <${patch}
	done
	make mrproper
	mk_source_dir ${LINUX_SOURCE_DIRECTORY}
	ln  -sfn  ${LINUX_SOURCE_DIRECTORY}  linux
	mv ./* ${LINUX_SOURCE_DIRECTORY}/
elif [[ "$mode" == "oldktree" ]]
then
	LINUX_SOURCE_DIRECTORY=$old_src_tree
	export LINUX_SOURCE_DIRECTORY
else
	echo "I don't know what $mode is"
	return 1
fi
cd ${LINUX_SOURCE_DIRECTORY}

if [[ "$reconf" == "true" || ! -f ./.config ]]
then
	if [[ $COMPILE ]]
	then
		make mrproper
	fi
	cp ${CONFIG_CACHE}/kernel.config ./.config
	ARCH=${kernel_arch} make $MAKEMODE
	cp ./.config ${CONFIG_CACHE}/kernel.config

# this doesn't work can't quite get it so I'm not going to use it, think its a bug in the kernel
#	if [[ ${OPTIONAL_BUILD_DIR} ]]
#	then
#		mkdir -p ${OPTIONAL_BUILD_DIR}
#		cp ${INSTALL_ROOT}/${CONFIG_CACHE}/kernel.config ${OPTIONAL_BUILD_DIR}/.config
#		ARCH="${kernel_arch}" make O=${OPTIONAL_BUILD_DIR} $MAKEMODE
#		cp ${OPTIONAL_BUILD_DIR}/.config ${INSTALL_ROOT}/${CONFIG_CACHE}/kernel.config
#	else
#		cp ${INSTALL_ROOT}/${CONFIG_CACHE}/kernel.config ./
#		ARCH="${kernel_arch}" make $MAKEMODE
#		cp ./.config ${INSTALL_ROOT}/${CONFIG_CACHE}/kernel.config
#	fi
fi
