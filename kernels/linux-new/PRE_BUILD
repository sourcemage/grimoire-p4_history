linux_new_uncompress()
{
	if [ "`file $1 | grep gzip`" != "" ]
	then
		gunzip $1
	elif [ "`file $1 | grep bzip`" != "" ]
	then
		bunzip2 $1
	elif [ "`file $1 | grep diff`" != "" ]
	then
		echo "$1 doesn't need uncompressing"
	else
		echo "$1 has some unknown/unimplemented compression type"
		return 1
	fi
}


if [[ "$mode" == "oldktree" ]]
then
	if [ -d ${LINUX_SOURCE_DIRECTORY} ]
	then
		echo "Okay dir does exist"
	else
		echo "Ah, ${LINUX_SOURCE_DIRECTORY} doesn't exist"
		echo "Going to newktree mode"
		mode="newktree"
	fi
fi

if [[ "$mode" == "newktree" ]]
then
	mk_source_dir $LINUX_SOURCE_DIRECTORY &&
	cd $LINUX_SOURCE_DIRECTORY &&
	unpack $SOURCE ${MD5[0]} &&
	mv ./*/* ./
	
	. ${SCRIPT_DIRECTORY}/latest.defaults
	for patch in $patches
	do
		case "$patch" in
			LATEST*)
				patch=${!patch}
				;;
			*)
				;;
		esac
		pval=1
		. ${SCRIPT_DIRECTORY}/info/patches/*/${patch}
		cp ${SOURCE_CACHE}/${source} ./
		linux_new_uncompress ./${source}
		echo "Patching ${patch}"
		sleep 3
		patch -p${pval} <${patch}
	done
	make mrproper
elif [[ "$mode" == "oldktree" ]]
then
	echo "mode is oldktree"
	cd $LINUX_SOURCE_DIRECTORY
else
	echo "I don't know what $mode is"
	return 1
fi

if [[ "$TXTMESSAGE" != "" ]]
then
        message $TXTMESSAGE
        sleep 5
fi
		

cp ${CONFIG_CACHE}/kernel.config ./.config

if [[ "$reconf" == "true" ]]
then
	ARCH=${kernel_arch} make $MAKEMODE
	cp ./.config ${CONFIG_CACHE}/kernel.config

# this doesn't work can't quite get it so I'm not going to use it, think its a bug in the kernel
#	if [[ ${OPTIONAL_BUILD_DIR} ]]
#	then
#		mkdir -p ${OPTIONAL_BUILD_DIR}
#		cp ${INSTALL_ROOT}/${CONFIG_CACHE}/kernel.config ${OPTIONAL_BUILD_DIR}/.config
#		ARCH="${kernel_arch}" make O=${OPTIONAL_BUILD_DIR} $MAKEMODE
#		cp ${OPTIONAL_BUILD_DIR}/.config ${INSTALL_ROOT}/${CONFIG_CACHE}/kernel.config
#	else
#		cp ${INSTALL_ROOT}/${CONFIG_CACHE}/kernel.config ./
#		ARCH="${kernel_arch}" make $MAKEMODE
#		cp ./.config ${INSTALL_ROOT}/${CONFIG_CACHE}/kernel.config
#	fi
fi
