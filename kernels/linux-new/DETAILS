    SPELL=linux-new

# Load local config
if [ -f $DEPENDS_CONFIG/$SPELL ]; then
  source $DEPENDS_CONFIG/$SPELL
fi
# Load list with Kernel Versions
source ${GRIMOIRE}/${SECTION}/${SPELL}/KERNELS

# Kernel Version: either a Variable (LATEST_...) or a version number itself. otherwise default to LATEST_2_4)
VERSION=${!KERNEL_VERSION=${KERNEL_VERSION=${LATEST_2_4}}}

# --- Parse version number ---

RELEASE=${VERSION%%-*}
PRERELEASE=${RELEASE}
TREE=${RELEASE%.*}
TAIL=${VERSION#$RELEASE}

while [[ $TAIL == -* ]]
do
  PATCH=${TAIL##*-}
  TAIL=${TAIL%-$PATCH}
  PATCHES="$PATCH $PATCHES"
  if [[ $PATCH == ac* ]]; then
    AC_PATCH=$PATCH
  elif [[ $PATCH == dj* ]]; then
    DJ_PATCH=$PATCH
  elif [[ $PATCH == pre* ]] || [[ $PATCH == rc* ]]; then
    RELEASE=${TREE}.$((${PRERELEASE#${TREE}.*}-1))  # Reduce Version number by one
    PREPATCH=$PATCH
  else
    echo "Failed parsing patches"
    exit 1
  fi
done

SOURCE="linux-${RELEASE}.tar.bz2"
SOURCE_URL="${KERNEL_URL}/pub/linux/kernel/v${TREE}/linux-${RELEASE}.tar.bz2"

if [[ "${PREPATCH}" != "" ]]; then
  SOURCE2="patch-${PRERELEASE}-${PREPATCH}.bz2"
  SOURCE2_URL="${KERNEL_URL}/pub/linux/kernel/v${TREE}/testing/patch-${PRERELEASE}-${PREPATCH}.bz2"
fi

if [[ "${AC_PATCH}" != "" ]]; then
  SOURCE3="patch-${VERSION}.bz2"
  SOURCE3_URL="${KERNEL_URL}/pub/linux/kernel/people/alan/linux-${TREE}/${PRERELEASE}/patch-${VERSION}.bz2"
fi

if [[ "${DJ_PATCH}" != "" ]]; then
  SOURCE3="patch-${VERSION}.diff.bz2"
  SOURCE3_URL="${KERNEL_URL}/pub/linux/kernel/people/davej/patches/${TREE}/${RELEASE}/patch-${VERSION}.diff.bz2"
fi


WEB_SITE=http://www.kernel.org
ENTERED=20020819
UPDATED=20020819
ARCHIVE="off"
SHORT="linux is the kernel - the core of the Unix operating system."
LICENSE[0]=GPL
cat << EOF
This Spell supports Kernel Releases 2.0, 2.2, 2.4 and 2.5 inclusive
prepatches and patches from Alan Cox and David Jones.

Linux is a clone of the Unix kernel, written from scratch by Linus
Torvalds with assistance from a loosely-knit team of hackers across the
Net. It aims towards POSIX and Single UNIX Specification compliance. It
has all the features you would expect in a modern fully-fledged Unix
kernel, including true multitasking, virtual memory, shared libraries,
demand loading, shared copy-on-write executables, proper memory
management, and TCP/IP networking.
EOF

