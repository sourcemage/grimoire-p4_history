            SPELL=xdirectfb
	  VERSION=1.0-rc5
             BASE=4.3.0.1
              OLD=4.3.0
            XVERS=${OLD//./}
 	   SOURCE=XDirectFB-$VERSION.tar.gz
          SOURCE2=X${XVERS}src-1.tgz
          SOURCE3=X${XVERS}src-2.tgz
          SOURCE4=X${XVERS}src-3.tgz
          SOURCE5=X${XVERS}src-4.tgz
          SOURCE6=X${XVERS}src-5.tgz
          SOURCE7=X${XVERS}src-6.tgz
          SOURCE8=X${XVERS}src-7.tgz
          SOURCE9=${OLD}-${BASE}.diff.gz
 SOURCE_DIRECTORY=$BUILD_DIRECTORY/xc
    SOURCE_URL[0]=http://www.directfb.org/download/XDirectFB/$SOURCE
   SOURCE2_URL[0]=$XFREE86_URL/${OLD}/source/$SOURCE2
   SOURCE3_URL[0]=$XFREE86_URL/${OLD}/source/$SOURCE3
   SOURCE4_URL[0]=$XFREE86_URL/${OLD}/source/$SOURCE4
   SOURCE5_URL[0]=$XFREE86_URL/${OLD}/source/$SOURCE5
   SOURCE6_URL[0]=$XFREE86_URL/${OLD}/source/$SOURCE6
   SOURCE7_URL[0]=$XFREE86_URL/${OLD}/source/$SOURCE7
   SOURCE8_URL[0]=$XFREE86_URL/${OLD}/source/$SOURCE8
   SOURCE9_URL[0]=$XFREE86_URL/${OLD}/fixes/$SOURCE9
           MD5[0]=01c289504ed9e3602821ae3622fa6051
           MD5[1]=90fd1261c1a70510a12fececedadf1a9
           MD5[2]=b8a1c45dd8c59549e435111115a439d3
           MD5[3]=793531f6c1bdf9d4d2f3f878901192b8
           MD5[4]=d40bfdcc2ed4e496c1ad7a71f2e3fc64
           MD5[5]=3b8d6ded289c64af6055c915f05326e8
           MD5[6]=fb8a4e286d9691a13bc2df84e5149a0e
           MD5[7]=f689e23a1bf1c15a91c998be971e5660
           MD5[8]=204b3ba31b6c34442bfa902337a548db
 	 WEB_SITE=http://www.directfb.org/xdirectfb.xml
	  ENTERED=20030916
	  UPDATED=20030916
       LICENSE[0]=LGPL
       LICENSE[1]=XCL
       LICENSE[2]=XCL
       LICENSE[3]=XCL
       LICENSE[4]=XCL
       LICENSE[5]=XCL
       LICENSE[6]=XCL
       LICENSE[7]=XCL
       LICENSE[8]=XCL
       LICENSE[9]=XCL
             FUZZ="off"
 	    SHORT="a rootless X Server using DirectFB"
cat << EOF
XDirectFB is a rootless X Server using DirectFB windows for X11 toplevel windows. 
It builds on top of the latest stable release of the X11 project, 
and currently is a replacement for our xfree86 spell, given time this might change.
This way you can adjust the opacity of every application with your mouse wheel 
(while holding Meta down over a window).Window movements are initiated by the 
applications or the window manager. The graphical movement is done by 
DirectFB using available hardware acceleration. Overlapping toplevel windows 
do not cause expose events, i.e. redrawing of the window contents, as they are 
DirectFB windows and therefore have an own surface, a.k.a. backing store. 

Usage Requirements
------------------
Depending on the DirectFB application you want to run, you need some
   or all of these:

   - A working frame buffer device (check the output of 'fbset -i').
   - A keyboard (if it works on the console, everything should be fine).
   - A PS/2 or serial mouse for windowing. USB and ADB mice do also work
     via PS/2 emulation.

   To access the frame buffer device and the mouse you need access to
   /dev/tty0, /dev/fb0 and the mouse device (/dev/psaux, /dev/mouse).
   You can either run all DirectFB applications as root or allow users
   to access these devices. A reasonable way to do this is to add users
   to the group tty (or some other group) and allow this group to read
   and write the files in /dev:

       crw-rw----    1 root     tty       29,   0  /dev/fb0
       crw-rw----    1 root     tty       10,   1  /dev/psaux
       crw-rw----    1 root     tty        4,   0  /dev/tty0

Configuring the Linux frame buffer device
-----------------------------------------

   DirectFB needs a Linux kernel with frame buffer support. Check the
   documentation in the kernel tree (/usr/src/linux/Documentation/fb/) on
   how to enable the frame buffer device for your graphics card.

   The generic VESA frame buffer device does not support mode switching
   and you will not get hardware acceleration. To make DirectFB work with
   veasfb, you should add the following lines to /etc/lilo.conf:

        append="video=vesa:ywrap,mtrr"

   'ywrap' enables panning with wraparound.
   'mtrr' enables setting caching type for the frame buffer to write-combining.

        vga=791

   This sets the mode on startup. 791 means 1024x768@16, 788 means 800x600@16.

   All VESA Video Modes:

   Bits    640x480 800x600 1024x768 1280x1024 1600x1200
   8       769     771     773      775       796
   16      785     788     791      794       798
   32      786     789     792      795       799

   Other frame buffer devices support mode switching. DirectFB will only
   support modes listed in your /etc/fb.modes file. By default the first
   entry found is used.

   If you have a Matrox card you may want to try the vsync patch found in
   the patches directory that enables applications to "idle wait" for the
   vertical retrace.
EOF
