           SPELL=y
         VERSION=0.2.1
          SOURCE=Y-${VERSION}.tar.gz
SOURCE_DIRECTORY=${BUILD_DIRECTORY}/Y-${VERSION}
   SOURCE_URL[0]=http://www.y-windows.org/releases/${SOURCE}
     SOURCE_HASH=sha512:40820c9058e1bfaca7424b3f65c3429a493772d1f697c336e3c89b2ad886b66c1751aeb704a0fac4b8feb59b4d6f941d7295cc7bb5232984da42b5ff0d571f5e
        WEB_SITE=http://www.y-windows.org/
         ENTERED=20040219
         UPDATED=20040219
      LICENSE[0]="LGPL GPL"
       BUILD_API=2
           SHORT="Successor to the X-Windowing System"
cat << EOF
I've got tired with the state of desktop GNU/Linux. Most of the problems that I see with it can be traced back to the underlying window system, X. So I decided to write its successor...

Y was my final year project for my masters degree at the Department of Computing, Imperial College, London. I set out to design and begin the implementation of a modern windowing system. The Y design has the following features:

* Network Transparency
    Contrary to popular belief, supporting network transparency does not reduce the speed of the window system on local hosts. Further, with Y's in-server knowledge of widgets, applications run over a slow network can appear almost as responsive as local applications (especially when compared to an X application). 
* Modularity (plug-in style: dynamically unloadable and reloadable)
    Unload an old video driver, load a new version. On the fly. No restart in sight. 
* In-server implementation of widgets
    Y specifies a core set of widget classes. Objects of these classes are stored in the server, where they are closer to the user and thus more responsive from the user's point of view. 
* Consistency and Themeability
    Y widgets use the currently loaded theme to render themselves. Since all server widgets are using the same theme, all widgets appear consistent throughout the desktop. Client applications can also use the theme's drawing operations, allowing specialised widgets to make themselves fit in with the look-and-feel. 
* Support for hardware acceleration
    The Y design can make use of hardware acceleration to speed up rendering operations. This can even include the use of 3D-accelerators' textures to draw windows with (someone has already implemented a prototype of this which is very smooth). 
* Better internationalisation, localisation, and accessiblity
    In-server widgets means there can be exactly one current language, one complex input method system for languages that require them, and one set of accessibility features. 
EOF
