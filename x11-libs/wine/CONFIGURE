# @usage configure_optional <1:test> <2:enable-option> <3:disable-option> <4:prompt> <5:hint>
# works right if <test> is part of both <enable-option> and <disable-option>
# @return 0 if disabled
function configure_optional() {
    if ! grep -q "${1#-}" $SPELL_CONFIG; then
	local OPTION="$2"
	query "$4" "$5" || OPTION="$3"
	echo "OPTS=\"\$OPTS $OPTION\"" >> $SPELL_CONFIG
    fi
  # return the `enabled' flag for the option
    grep -q "${2#--}" $SPELL_CONFIG
}

# Things to determine:
# 1. Global / Local install
# 2. if global, root only or shared directory / registries, and which users
# 3. if shared registries: shared config files
# 4. if local, which users


# Setup which users are setup with a 'config' file and a registry
function wine_users {
    if ! grep -q WINEUSERS_CONFIG $SPELL_CONFIG; then
	grep home /etc/passwd|cut -d: -f1 |grep -v nobody| grep -v ftp > /etc/sorcery/local/wine.users &&
	echo "The following users were detected having /home/ directories,"
	echo "and will be provided with a config file and a registry."
	echo "Note: root will have a config file and registry regardless of your answer here."
	cat /etc/sorcery/local/wine.users &&
	if query "Do you wish to edit this list?" n
	    then
	    $EDITOR /etc/sorcery/local/wine.users
	fi
	WINEUSERS_CONFIG=y
	echo "WINEUSERS_CONFIG=$WINEUSERS_CONFIG" >> $SPELL_CONFIG
    fi
}

# Fake C global directory install
function global_install {
    if ! grep -q CROOT $SPELL_CONFIG; then
	if query "Do you wish to use the default directory for the global Fake 'C' directory? (/var/wine)" y
	    then
	    CROOT=/var/wine # C Drive
	else
	    query "Where do you wish the Fake 'C' directory to be?"
	    read CROOT
	fi
	echo "CROOT=$CROOT" >> $SPELL_CONFIG
	if ! grep -q GLOBAL_CONFIG $SPELL_CONFIG; then
	    if query "Do you wish to have a global config file" y
		then
		GLOBAL_CONFIG=y
	    else
		GLOBAL_CONFIG=n
	    fi
	    echo "GLOBAL_CONFIG=$GLOBAL_CONFIG" >> $SPELL_CONFIG
	fi
    fi
}

# fake_C local directory install
function local_install {
    if ! grep -q CROOT $SPELL_CONFIG; then
	CROOT=~/.wine/fake_C
	echo "CROOT=$CROOT" >> $SPELL_CONFIG
    fi
    if ! grep -q GLOBAL_CONFIG $SPELL_CONFIG; then
	GLOBAL_CONFIG=n
	echo "GLOBAL_CONFIG=$GLOBAL_CONFIG" >> $SPELL_CONFIG
    fi
}


# Floppy Configuration
function floppy_config {
    if ! grep -q FLOPPY $SPELL_CONFIG; then
	if query "Do you have a floppy drive?" y
	    then
	    FLOPPY=y
	else
	    FLOPPY=n
	fi
	if [ "$FLOPPY" == "y" ]; then
	    if query "Do you mount the floppy drive on '/mnt/floppy'?" y
		then
		AROOT=/mnt/floppy # A Drive
	    else
		query "Where do you mount the floppy drive?"
		read AROOT
	    fi
	    echo "AROOT=$AROOT" >> $SPELL_CONFIG
	fi
	echo "FLOPPY=$FLOPPY" >> $SPELL_CONFIG
    fi
}

# CD-ROM configuration
#
# I'm wondering if anyone has an idea on how to possibly
# combine cdrom_config and floppy_config, and possibly
# setup the ability to have multiple cdroms?
function cdrom_config {
    if ! grep -q DROOT $SPELL_CONFIG; then
	if query "Do you mount the CD-ROM drive on '/mnt/cdrom'?" y
	    then
	    DROOT=/mnt/cdrom # D Drive
	else
	    query "Where do you mount the CD-ROM drive?"
	    read DROOT
	fi
	echo "DROOT=$DROOT" >> $SPELL_CONFIG
    fi
}

# ask if the user desires a local or global install
if ! grep -q GLOBAL_C $SPELL_CONFIG; then
# uncomment to enable local installs
#    if query "Do you wish to have a global Fake 'C' directory?" y
#	then
	GLOBAL_C=y
#    else
#	GLOBAL_C=n
#    fi
    echo "GLOBAL_C=$GLOBAL_C" >> $SPELL_CONFIG
fi

if [ "$GLOBAL_C" == "y" ]; then
    global_install
    if ! grep -q WINEUSERS $SPELL_CONFIG; then
	if query "Do you wish the spell to install config files and registry for system users?" n
	    then WINEUSERS=y		
	else WINEUSERS=n
	fi
	echo "WINEUSERS=$WINEUSERS" >> $SPELL_CONFIG
    fi
    if [ "$WINEUSERS" == "y" ]; then
	wine_users
    fi
else
    local_install
    WINEUSERS=y
    wine_users
fi

floppy_config
cdrom_config

#
# Configure switches
#

configure_optional      'debug'         '--enable-debug'        '--disable-debug'       'Compile in all debugging message?' n
configure_optional      'trace'         '--enable-trace'        '--disable-trace'       'Compile in TRACE messages?' n
configure_optional      'opengl'         '--with-opengl'        '--without-opengl'       'enable OpenGL support?' y
configure_optional      'win16'        '--enable-win16'      '--disable-win16'      'Include Win16 support?' y
configure_optional      'curses'         '--with-curses'        '--without-curses'       'use curses?' y