diff -Naur lisa-0.2.2.orig/lisa/addressvalidator.cpp lisa-0.2.2/lisa/addressvalidator.cpp
--- lisa-0.2.2.orig/lisa/addressvalidator.cpp	2005-04-08 08:19:27.000000000 -0700
+++ lisa-0.2.2/lisa/addressvalidator.cpp	2005-04-08 09:08:02.192972856 -0700
@@ -33,7 +33,7 @@
    clearSpecs();
    MyString tmp=addressSpecs;
    setValidAddresses(tmp);
-};
+}
 
 AddressValidator::AddressValidator()
    //this is 127.0.0.0
@@ -42,10 +42,10 @@
    ,localhostMask(htonl(0xffffff00))
 {
    clearSpecs();
-};
+}
 
 AddressValidator::~AddressValidator()
-{};
+{}
 
 void AddressValidator::configure(Config& config)
 {
@@ -53,7 +53,7 @@
    tmp=tmp+";";
    setValidAddresses(tmp);
    getDebug()<<"AddressValidator::configure(): "<<tmp<<std::endl;
-};
+}
 
 
 void AddressValidator::setValidAddresses(MyString addressSpecs)
@@ -116,7 +116,7 @@
          addSpec(NETMASK_SPEC,net,mask);
       };
    };
-};
+}
 
 void AddressValidator::clearSpecs()
 {
@@ -127,7 +127,7 @@
       specs[i].mask=0;
       specs[i].typeOfSpec=NO_SPEC;
    };
-};
+}
 
 void AddressValidator::addSpec(int type, int address, int mask)
 {
@@ -141,7 +141,7 @@
          return;
       };
    };
-};
+}
 
 int AddressValidator::isValid(int addressNBO)
 {
@@ -218,5 +218,5 @@
    //if ((addressNBO==htonl(0x0a040801)) || (addressNBO==htonl(0xc0a80001))) return 0;
    getDebug()<<"AddressValidator::isValid: invalid address"<<std::endl;
    return 0;
-};
+}
 
diff -Naur lisa-0.2.2.orig/lisa/client.cpp lisa-0.2.2/lisa/client.cpp
--- lisa-0.2.2.orig/lisa/client.cpp	2005-04-08 08:19:27.000000000 -0700
+++ lisa-0.2.2/lisa/client.cpp	2005-04-08 09:08:02.194972552 -0700
@@ -32,7 +32,7 @@
    getDebug()<<"created new client"<<std::endl;
    if (m_fd==-1) m_done=1;
    m_creationTime=time(0);
-};
+}
 
 Client::Client()
 :parentServer(0)
@@ -41,7 +41,7 @@
 ,m_closeOnDelete(1)
 {
    m_creationTime=time(0);
-};
+}
 
 Client::Client(const Client& c)
 :parentServer(c.parentServer)
@@ -51,7 +51,7 @@
 ,m_closeOnDelete(1)
 {
    getDebug()<<"Client::Client copy ctor"<<std::endl;
-};
+}
 
 int Client::tryToGetInfo()
 {
@@ -84,14 +84,14 @@
    close();
    //exit(0);
    return 1;
-};
+}
 
 void Client::close()
 {
    if (m_fd!=-1) ::close(m_fd);
    m_fd=-1;
    m_done=1;
-};
+}
 
 void Client::read()
 {
@@ -101,11 +101,11 @@
    //the clients should not send us something !
    int result=::read(m_fd,buf,1024);
    if (result>=0) close();
-};
+}
 
 Client::~Client()
 {
    if (m_closeOnDelete)
       close();
-};
+}
 
diff -Naur lisa-0.2.2.orig/lisa/configfile.cpp lisa-0.2.2/lisa/configfile.cpp
--- lisa-0.2.2.orig/lisa/configfile.cpp	2005-04-08 08:19:27.000000000 -0700
+++ lisa-0.2.2/lisa/configfile.cpp	2005-04-08 09:08:02.196972248 -0700
@@ -104,7 +104,7 @@
       };
 	}
    while (!inf.eof());
-};
+}
 
 MyString Config::getEntry(const char *key, const char* defaultValue)
 {
@@ -131,7 +131,7 @@
       };
    };
    return defaultValue;
-};
+}
 
 int Config::getEntry(const char *key, int defaultValue)
 {
@@ -142,5 +142,5 @@
    int ok=sscanf(tmp.c_str(),"%d",&i);
    if (ok==1) return i;
    return defaultValue;
-};
+}
 
diff -Naur lisa-0.2.2.orig/lisa/ipaddress.cpp lisa-0.2.2/lisa/ipaddress.cpp
--- lisa-0.2.2.orig/lisa/ipaddress.cpp	2005-04-08 08:19:27.000000000 -0700
+++ lisa-0.2.2/lisa/ipaddress.cpp	2005-04-08 09:08:02.197972096 -0700
@@ -20,7 +20,7 @@
 
 IPAddress::IPAddress()
 {
-};
+}
 
 IPAddress::IPAddress(const MyString& ip)
 {
@@ -29,7 +29,7 @@
    else s=ip;
    i=string2Int(s);
    n=string2Struct(s);
-};
+}
 
 IPAddress::IPAddress(unsigned int ip)
 {
@@ -37,14 +37,14 @@
    s=int2String(i);
    n.s_addr=htonl(i);
    //n=string2Struct(s);
-};
+}
 
 IPAddress::IPAddress(struct in_addr ip)
 {
    n=ip;
    s=struct2String(n);
    i=string2Int(s);
-};
+}
 
 IPAddress::IPAddress(int b1, int b2, int b3, int b4)
 {
@@ -53,7 +53,7 @@
    s=tmp;
    i=string2Int(s);
    n=string2Struct(s);
-};
+}
 
 
 MyString IPAddress::int2String(unsigned int ip)
@@ -63,12 +63,12 @@
    addr.s_addr=htonl(ip);
    tmp=inet_ntoa(addr);
    return tmp;
-};
+}
 
 MyString IPAddress::struct2String(struct in_addr ip)
 {
    return MyString(inet_ntoa(ip));
-};
+}
 
 unsigned int IPAddress::string2Int(MyString ip)
 {
@@ -77,7 +77,7 @@
 //   cout<<addr.s_addr<<endl;
 //   return ntohl(addr.s_addr);
    return ntohl(inet_addr(ip.c_str()));
-};
+}
 
 struct in_addr IPAddress::string2Struct(MyString ip)
 {
@@ -85,13 +85,13 @@
 //   inet_aton(ip.c_str(),&tmp);
    tmp.s_addr = inet_addr(ip.c_str());
    return tmp;
-};
+}
 
 void IPAddress::print()
 {
    std::cout<<"address as string: "<<s<<std::endl;
    std::cout<<"address in host byte order:    "<<std::ios::hex<<i<<std::ios::dec<<std::endl;
    std::cout<<"address in network byte order: "<<std::ios::hex<<n.s_addr<<std::ios::dec<<std::endl;
-};
+}
 
 
diff -Naur lisa-0.2.2.orig/lisa/main.cpp lisa-0.2.2/lisa/main.cpp
--- lisa-0.2.2.orig/lisa/main.cpp	2005-04-08 08:19:27.000000000 -0700
+++ lisa-0.2.2/lisa/main.cpp	2005-04-08 09:08:02.200971640 -0700
@@ -48,7 +48,7 @@
    "Copyright (c) 2000 by Alexander Neundorf\n"\
    "email: neundorf@kde.org\n";
    std::cout<<versionInfo<<std::endl;
-};
+}
 
 void usage()
 {
@@ -70,7 +70,7 @@
 //      std::cout<<"Please note that the long options are not supported on
 //      this system"<<std::endl;
 //#endif
-};
+}
 
 NetManager *manager(0);
 
@@ -83,7 +83,7 @@
    if (manager!=0)
       manager->~NetManager();
    exit(0);
-};
+}
 
 void readConfig(int sigNumber)
 {
@@ -92,7 +92,7 @@
    if (manager!=0)
       manager->readConfig();
    signal(SIGHUP,&readConfig);
-};
+}
 
 void printState(int sigNumber)
 {
@@ -101,7 +101,7 @@
    if (manager!=0)
       manager->printState();
    signal(SIGUSR1,&printState);
-};
+}
 
 void setSignalHandler()
 {
@@ -135,7 +135,7 @@
 #ifdef SIGXFSZ
    signal(SIGXFSZ, &destruct);
 #endif
-};
+}
 
 #ifdef GNU_GETOPT 
 static struct option const long_opts[] =
diff -Naur lisa-0.2.2.orig/lisa/mystring.cpp lisa-0.2.2/lisa/mystring.cpp
--- lisa-0.2.2.orig/lisa/mystring.cpp	2005-04-08 08:19:27.000000000 -0700
+++ lisa-0.2.2/lisa/mystring.cpp	2005-04-08 09:08:20.760150216 -0700
@@ -47,5 +47,5 @@
       if ( *d++ == c )
          count++;
    return count;
-};
+}
 
diff -Naur lisa-0.2.2.orig/lisa/netmanager.cpp lisa-0.2.2/lisa/netmanager.cpp
--- lisa-0.2.2.orig/lisa/netmanager.cpp	2005-04-08 08:19:27.000000000 -0700
+++ lisa-0.2.2/lisa/netmanager.cpp	2005-04-08 09:08:02.204971032 -0700
@@ -791,7 +791,7 @@
    };
    m_servedThisPeriod=0;
    
-};
+}
 
 void NetManager::enableServerServer(int on)
 {
@@ -842,7 +842,7 @@
       ::close(m_bcFD);
       m_bcFD=-1;
    };
-};
+}
 
 int NetManager::findServerServer()
 {
@@ -976,7 +976,7 @@
    ::close(answerFD);
    //return the ip of the server server in network byte order
    return addr.sin_addr.s_addr;
-};
+}
 
 void NetManager::getListFromServerServer( int address)
 {
@@ -1005,7 +1005,7 @@
    ::close(serverServerFD);
    processScanResults();
    mgetDebug()<<"NetManager::getListFromServerServer succeeded"<<std::endl;
-};
+}
 
 void NetManager::printState()
 {
@@ -1025,7 +1025,7 @@
    std::cerr<<"Sending "<<m_maxPings<<" echo requests at once"<<std::endl;
    std::cerr<<"Publishing unnamed hosts: "<<m_deliverUnnamedHosts<<std::endl;
    std::cerr<<"Already served "<<m_serveCount<<" times"<<std::endl;
-};
+}
 
 //this one is not used at the moment
 /*int NetManager::uptime()
diff -Naur lisa-0.2.2.orig/lisa/netscanner.cpp lisa-0.2.2/lisa/netscanner.cpp
--- lisa-0.2.2.orig/lisa/netscanner.cpp	2005-04-08 08:19:27.000000000 -0700
+++ lisa-0.2.2/lisa/netscanner.cpp	2005-04-08 09:08:02.207970576 -0700
@@ -97,21 +97,21 @@
 ,m_useNmblookup(0)
 ,hostList(0)
 ,tmpIPRange("")
-{};
+{}
 
 NetScanner::~NetScanner()
 {
 //   std::cerr<<"----------- Netscanner dtor "<<std::endl;
    delete hostList;
    ::close(m_rawSocketFD);
-};
+}
 
 void addMissingSemicolon(MyString& text)
 {
    if (text.isEmpty()) return;
    if (text[text.length()-1]!=';')
       text+=';';
-};
+}
 
 void NetScanner::configure(Config& config)
 {
@@ -162,7 +162,7 @@
    if (m_firstWait>99) m_firstWait=99;
    if (m_secondWait>99) m_secondWait=99;
    mgetDebug()<<"NetScanner::configure(): "<<ipRangeStr<<std::endl;
-};
+}
 
 struct in_addr NetScanner::getIPfromArray(unsigned int index)
 {
@@ -293,12 +293,12 @@
       tmp=getNextIPRange();
    };
    return IPAddress("0.0.0.0").asStruct();
-};
+}
 
 void NetScanner::resetIPRange()
 {
    tmpIPRange=ipRangeStr;
-};
+}
 
 MyString NetScanner::getNextIPRange()
 {
@@ -307,7 +307,7 @@
    MyString tmp(tmpIPRange.left(cp));
    tmpIPRange=tmpIPRange.mid(cp+1);
    return tmp;
-};
+}
 
 char* NetScanner::ip2Name(struct in_addr ip)
 {
@@ -320,7 +320,7 @@
    }
    mgetDebug()<<"NetScanner::ip2name -"<<hostname->h_name<<std::endl;
    return hostname->h_name;
-};
+}
 
 void NetScanner::nmblookupScan(SimpleList<Node>* newList)
 {
@@ -448,7 +448,7 @@
    };
    mgetDebug()<<"NetScanner::nmblookupScan: finished"<<std::endl;
    delete [] receiveBuffer;
-};
+}
 
 void NetScanner::pingScan(SimpleList<Node>* newList)   //the ping-version
 {
@@ -588,7 +588,7 @@
       tv1.tv_usec = m_secondWait*10*1000;//0.5 sec
    };
    mgetDebug()<<"NetScanner::pingScan() ends"<<std::endl;
-};
+}
 
 void NetScanner::doScan()
 {
@@ -609,7 +609,7 @@
    
    delete hostList;
    hostList=tmpPingList;
-};
+}
 
 int NetScanner::hostAlreadyInList(int ip, SimpleList<Node>* nodes)
 {
@@ -619,7 +619,7 @@
          return 1;
    };
    return 0;
-};
+}
 
 void NetScanner::removeUnnamedHosts(SimpleList<Node>* nodes)
 {
@@ -645,7 +645,7 @@
       };
       pre=node;
    };
-};
+}
 
 void NetScanner::completeNames(SimpleList<Node>* nodes)
 {
@@ -676,5 +676,5 @@
          mgetDebug()<<"NetScanner::completeNames: resolved: "<<node->name<<std::endl;
       };
    };
-};
+}
 
diff -Naur lisa-0.2.2.orig/lisa/simplelist.cpp lisa-0.2.2/lisa/simplelist.cpp
--- lisa-0.2.2.orig/lisa/simplelist.cpp	2005-04-08 08:19:27.000000000 -0700
+++ lisa-0.2.2/lisa/simplelist.cpp	2005-04-08 09:08:02.209970272 -0700
@@ -7,13 +7,13 @@
    ,m_current(0)
    ,m_last(0)
    ,m_size(0)
-{};
+{}
 
 template <class T>
 SimpleList<T>::~SimpleList()
 {
    clear();
-};
+}
 
 template <class T>
 void SimpleList<T>::append(const T& text)
@@ -31,7 +31,7 @@
       m_last=m_last->m_next;
    };
    m_size++;
-};
+}
 
 template <class T>
 void SimpleList<T>::removeFirst()
@@ -44,7 +44,7 @@
       m_last=0;
    m_current=0;
    delete first;
-};
+}
 
 template <class T>
 void SimpleList<T>::clear()
@@ -55,7 +55,7 @@
    m_last=0;
    m_list=0;
    m_size=0;
-};
+}
 
 template <class T>
 void SimpleList<T>::remove(T* item)
@@ -88,7 +88,7 @@
       pre=m_current;
    };
    
-};
+}
 
 template <class T>
 T* SimpleList<T>::first()
@@ -97,7 +97,7 @@
    if (m_list==0)
       return 0;
    return &m_current->m_item;
-};
+}
 
 template <class T>
 T* SimpleList<T>::next()
@@ -106,7 +106,7 @@
    m_current=m_current->m_next;
    if (m_current==0) return 0;
    return &m_current->m_item;
-};
+}
 
 template <class T>
 int SimpleList<T>::size()
diff -Naur lisa-0.2.2.orig/lisa/strictmain.cpp lisa-0.2.2/lisa/strictmain.cpp
--- lisa-0.2.2.orig/lisa/strictmain.cpp	2005-04-08 08:19:27.000000000 -0700
+++ lisa-0.2.2/lisa/strictmain.cpp	2005-04-08 09:08:02.211969968 -0700
@@ -49,7 +49,7 @@
    "Copyright (c) 2000 by Alexander Neundorf\n"\
    "email: neundorf@kde.org\n";
    std::cout<<versionInfo<<std::endl;
-};
+}
 
 void usage()
 {
@@ -67,7 +67,7 @@
 //#ifndef _GNU_SOURCE
 //      cout<<"Please note that the long options are not supported on this system"<<endl;
 //#endif
-};
+}
 
 void destruct(int sigNumber)
 {
@@ -75,7 +75,7 @@
    std::cout<<"signal caught: "<<sigNumber<<", exiting"<<std::endl;
    //signal(sigNumber,&destruct);
    exit(0);
-};
+}
 
 NetManager *manager(0);
 
@@ -86,7 +86,7 @@
    if (manager!=0)
       manager->readConfig();
    signal(SIGHUP,&readConfig);
-};
+}
 
 void printState(int sigNumber)
 {
@@ -95,7 +95,7 @@
    if (manager!=0)
       manager->printState();
    signal(SIGUSR1,&printState);
-};
+}
 
 void setSignalHandler()
 {
@@ -129,7 +129,7 @@
 #ifdef SIGXFSZ
    signal(SIGXFSZ, &destruct);
 #endif
-};
+}
 
 #ifdef GNU_GETOPT
 static struct option const long_opts[] =
diff -Naur lisa-0.2.2.orig/lisa/stringlist.cpp lisa-0.2.2/lisa/stringlist.cpp
--- lisa-0.2.2.orig/lisa/stringlist.cpp	2005-04-08 08:19:27.000000000 -0700
+++ lisa-0.2.2/lisa/stringlist.cpp	2005-04-08 09:08:02.213969664 -0700
@@ -6,13 +6,13 @@
    ,m_current(0)
    ,m_last(0)
    ,m_size(0)
-{};
+{}
 
 template <class T>
 SimpleList<T>::~SimpleList()
 {
    clear();
-};
+}
 
 template <class T>
 void SimpleList<T>::append(const T& text)
@@ -28,7 +28,7 @@
       m_last=m_last->m_next;
    };
    m_size++;
-};
+}
 
 template <class T>
 void SimpleList<T>::removeFirst()
@@ -41,7 +41,7 @@
       m_last=0;
    m_current=0;
    delete first;
-};
+}
 
 template <class T>
 void SimpleList<T>::clear()
@@ -52,7 +52,7 @@
    m_last=0;
    m_list=0;
    m_size=0;
-};
+}
 
 template <class T>
 void SimpleList<T>::remove(T* item)
@@ -83,7 +83,7 @@
       pre=m_current;
    };
    
-};
+}
 
 template <class T>
 T* SimpleList<T>::first()
@@ -92,7 +92,7 @@
    if (m_list==0)
       return 0;
    return &m_current->m_item;
-};
+}
 
 template <class T>
 T* SimpleList<T>::next()
@@ -101,7 +101,7 @@
    m_current=m_current->m_next;
    if (m_current==0) return 0;
    return &m_current->m_item;
-};
+}
 
 template <class T>
 int SimpleList<T>::size()
