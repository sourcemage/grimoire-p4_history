           SPELL=eet
if  [  "$EET_CVS"  ==  "y"  ];  then
  if  [  "$EET_CVS_AUTOUPDATE"  ==  "y"  ];  then
         VERSION=$(date +%Y%m%d)
  else
         VERSION=cvs
  fi
          SOURCE=$SPELL-cvs.tar.bz2
  FORCE_DOWNLOAD=on
SOURCE_DIRECTORY=$BUILD_DIRECTORY/$SPELL-cvs
   SOURCE_URL[0]=cvs://:pserver:anonymous@thinktux.net:/root:e17/libs/$SPELL
   SOURCE_URL[1]=cvs://:pserver:anonymous@cvs.sourceforge.net:/cvsroot/enlightenment:e17/libs/$SPELL
   SOURCE_IGNORE=volatile
else
         VERSION=0.9.9
          SOURCE=$SPELL-$VERSION.tar.gz
SOURCE_DIRECTORY=$BUILD_DIRECTORY/$SPELL-$VERSION
      SOURCE_URL=$SOURCEFORGE_URL/enlightenment/$SOURCE
     SOURCE_HASH=sha512:afbd40c6ee9863af07fcd7bae711a287b13fd62b04569fe124e59f65335f99f8e4a434b9dd152fc791c746616104b3bbf311cfbb7f871e3fb5782228ce4814ef
fi
      LICENSE[0]=BSD
        WEB_SITE=http://enlightenment.org/Libraries/Eet/
         ENTERED=20040311
         UPDATED=20040311
           SHORT="EET is a part of the EFL"
cat << EOF
EET is a tiny library designed to write an arbitary set of chunks of data to a
file and optionally compress each chunk (very much like a zip file) and allow
fast random-access reading of the file later on. It does not do zip as a zip
itself has more complexity than is needed, and it was much simpler to impliment
this once here.

Eet is extremely fast, small and simple. Eet files can be very small and highly
compressed, making them very optimal for just sending across the internet
without having to archive, compress or decompress and install them. They allow
for lightning-fast random-acess reads once created, making them perfect for
storing data that is written once (or rarely) and read many times, but the
program does not want to have to read it all in at once.

It also can encode and decode data structures in memory, as well as image data
for saving to Eet files or sending across the network to other machines, or
just writing to arbitary files on the system. All data is encoded in a platform
independent way and can be written and read by any architecture.
EOF
